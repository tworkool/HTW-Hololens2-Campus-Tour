%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 1702.m10.i304.n010.P.c25.522083404 Doodle blank speech bubbles, hand drawn cartoon thinking shapes vector set.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: alex
%%CreationDate: 09.02.17
%%BoundingBox: 0 0 406 308
%%HiResBoundingBox: 0 0 405.1279 307.1900
%%CropBox: 0 0 405.1279 307.1900
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1200 GradRes=300 Text=0 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vegetables_2</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:description>
            <rdf:Alt/>
         </dc:description>
         <xmp:MetadataDate>2017-02-09T10:09:38+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2017-02-09T10:09:38+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2017-02-09T10:09:38+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>196</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAxAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qo3l5aWVu9zdzJBAl&#xA;OcsjBVFTQbnxOwxVK9RbzXdzvbaYsGmWymjajcj6xI3/ABht0ZVp4PJJsf2DiqWv+W+kXvxa7faj&#xA;rkh3Iu7uSOCp6/6Nam3t6fOPFVNvyd/K1o/TPlfTqEUJEChv+CHxfjiqBuPyyvNIH1nyLrV1otzG&#xA;Kppl3NLfaZL34yQztI8fLpyiYEeGKpt5K86HXhd6dqVodL8zaUQmraU55ceVeE0L/wC7IZKVVh8j&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:06a0c591-f4f3-43bf-ba7d-5e37c40d1781</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:06a0c591-f4f3-43bf-ba7d-5e37c40d1781</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:75c6999d-0770-3f47-994e-62e240345601</stRef:instanceID>
            <stRef:documentID>xmp.did:da61bc14-c99e-4af0-abe1-8146b9b73b7c</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:49f5aed3-9f57-c747-81d8-825062695e08</stEvt:instanceID>
                  <stEvt:when>2015-09-25T15:23:34+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2f17e0a3-50be-7c47-b9ca-27c49acbf287</stEvt:instanceID>
                  <stEvt:when>2015-10-03T16:27:40+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2a30ee13-b97c-fe48-9da0-a884076cf819</stEvt:instanceID>
                  <stEvt:when>2015-10-03T16:54:01+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b893f768-fe5c-ba45-8877-09ac362c0436</stEvt:instanceID>
                  <stEvt:when>2015-10-03T17:26:55+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6325c653-0cfe-7c48-8ed6-e72bbe216650</stEvt:instanceID>
                  <stEvt:when>2015-10-05T09:20:52+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ea579fea-020a-459e-8f58-eac12c8c86f6</stEvt:instanceID>
                  <stEvt:when>2015-12-30T14:03:36+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4755b3cb-9788-45cc-92f2-8222b48c26a5</stEvt:instanceID>
                  <stEvt:when>2016-01-04T11:18:09+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9347800c-159b-485e-9ece-e12cb1c5b52f</stEvt:instanceID>
                  <stEvt:when>2016-01-30T12:10:47+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c463976e-30cf-49c9-8299-72af296da477</stEvt:instanceID>
                  <stEvt:when>2016-02-01T13:57:54+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ef1496fa-2e19-4038-920d-50879e136d2d</stEvt:instanceID>
                  <stEvt:when>2016-02-03T15:28:57+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0e986875-ba66-4d23-aa4d-c94e0096006c</stEvt:instanceID>
                  <stEvt:when>2016-02-03T15:31:16+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:420450e9-0e29-47c0-823c-aa44c61de338</stEvt:instanceID>
                  <stEvt:when>2016-02-03T15:56:46+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:88e138da-69f5-49df-98ab-be3108d3fd79</stEvt:instanceID>
                  <stEvt:when>2016-02-16T17:55:05+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:77821261-0334-404a-acbe-d4e21e41ff82</stEvt:instanceID>
                  <stEvt:when>2016-02-18T13:08:25+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:cb6ab75e-42d8-45a0-9199-8e7e75d8ef5a</stEvt:instanceID>
                  <stEvt:when>2016-03-02T09:51:38+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4f47b30b-e484-40ce-83df-f8f030ded9da</stEvt:instanceID>
                  <stEvt:when>2016-03-02T09:58:38+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CC (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:07edeb94-fa5a-47d5-806c-0f1b9e4bcdc2</stEvt:instanceID>
                  <stEvt:when>2016-03-02T10:03:17+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CC (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7cd690c6-91d8-40c3-8af0-784c06734f33</stEvt:instanceID>
                  <stEvt:when>2016-03-02T10:08:19+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8139bc4c-e301-4394-8e89-a4a2a3700012</stEvt:instanceID>
                  <stEvt:when>2016-03-02T10:10:36+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6db56fef-dc7a-4b7a-bd93-e6e4896af27f</stEvt:instanceID>
                  <stEvt:when>2016-03-02T10:12:18+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CC (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:59621751-a6e6-4ff1-a8d3-dff35f672c02</stEvt:instanceID>
                  <stEvt:when>2016-03-02T10:12:30+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CC (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:cc47a09d-e54f-494b-9ac9-b789e688edd0</stEvt:instanceID>
                  <stEvt:when>2016-03-07T10:57:32+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8f9c1984-f38c-4324-85d0-13fe01d788e3</stEvt:instanceID>
                  <stEvt:when>2016-03-07T13:37:50+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d560946e-c455-42d2-9735-84bbb976da13</stEvt:instanceID>
                  <stEvt:when>2016-03-14T14:58:29+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CC (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:17fe510c-fc9c-4faa-9c2b-5e20e019e4c8</stEvt:instanceID>
                  <stEvt:when>2016-03-26T16:38:23+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8f1c1824-1ebf-404d-8e5f-55a435408924</stEvt:instanceID>
                  <stEvt:when>2017-01-23T16:16:22+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0e53dd36-619f-4c7d-8433-5530ebc343eb</stEvt:instanceID>
                  <stEvt:when>2017-01-24T09:20:45+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CC (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:56df25e2-a89c-4639-ae94-552a7aa698a2</stEvt:instanceID>
                  <stEvt:when>2017-01-24T09:20:45+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CC (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9f0a233b-d64a-4cbb-9d0f-58aad312ac22</stEvt:instanceID>
                  <stEvt:when>2017-01-24T09:41:42+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:06a0c591-f4f3-43bf-ba7d-5e37c40d1781</stEvt:instanceID>
                  <stEvt:when>2017-02-09T10:09:38+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000001</stDim:w>
            <stDim:h>350.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -307.19 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 307.19 li
405.128 307.19 li
405.128 0 li
cp
clp
24.8979 10.8511 mo
4.43091 22.4199 -5.16724 52.9099 11.5274 71.6474 cv
28.0954 90.2428 56.8812 85.7509 70.7534 66.438 cv
71.6555 65.182 69.589 64.0077 68.6893 65.2315 cv
55.4742 83.2077 28.7879 87.3515 13.1426 70.0321 cv
-3.04189 52.116 6.66428 23.3525 25.0724 11.1496 cv
25.2567 11.0275 25.0934 10.7405 24.8979 10.8511 cv
24.8979 10.8511 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.137255 .121569 .12549 rgb
f
69.8845 65.7798 mo
72.9028 67.5785 76.4497 68.1284 79.9102 68.3575 cv
81.1048 68.4366 81.1085 66.5563 79.9102 66.4933 cv
76.6116 66.3199 73.5044 65.4543 70.2784 64.8456 cv
69.7284 64.7418 69.3627 65.4689 69.8845 65.7798 cv
69.8845 65.7798 li
cp
f
77.7157 60.3238 mo
78.061 62.6722 78.8184 65.0081 79.4748 67.2851 cv
79.7639 68.2876 81.3789 67.8231 81.026 66.8574 cv
80.1993 64.595 79.4209 62.2147 78.2928 60.0805 cv
78.1119 59.7384 77.6675 59.9959 77.7157 60.3238 cv
77.7157 60.3238 li
cp
f
27.959 9.40302 mo
43.2813 1.00488 69.4542 -3.94396 81.1075 13.3543 cv
89.915 26.4283 89.0662 48.5912 77.7583 59.7721 cv
76.6354 60.8824 78.3775 62.6254 79.4911 61.5049 cv
91.6524 49.2684 92.5208 24.7318 81.9606 11.0937 cv
68.9175 -5.75114 43.2377 -.906471 27.7845 9.10444 cv
27.5983 9.22506 27.7627 9.51063 27.959 9.40302 cv
27.959 9.40302 li
cp
f
76.4971 13.2823 mo
76.7496 13.4085 77.0021 13.5348 77.2546 13.661 cv
77.2632 13.6653 77.2708 13.6524 77.2622 13.648 cv
77.0097 13.5218 76.7572 13.3955 76.5047 13.2693 cv
76.496 13.265 76.4884 13.2779 76.4971 13.2823 cv
76.4971 13.2823 li
cp
f
116.703 23.2073 mo
120.539 18.8602 126.724 17.4815 131.687 20.8681 cv
132.334 21.3097 132.954 20.2491 132.302 19.8166 cv
127.262 16.4767 119.601 17.5484 116.384 22.9614 cv
116.269 23.1552 116.547 23.3836 116.703 23.2073 cv
116.703 23.2073 li
cp
f
132.194 20.5719 mo
136.351 7.0279 150.276 -.0485476 163.326 6.724 cv
174.929 12.7459 178.084 27.2451 173.776 38.8218 cv
173.333 40.0114 175.236 40.5244 175.675 39.3454 cv
180.612 26.0951 175.976 9.62438 162.155 4.02747 cv
149.142 -1.24193 133.125 5.67463 131.574 20.488 cv
131.536 20.8534 132.093 20.8992 132.194 20.5719 cv
132.194 20.5719 li
cp
f
174.583 40.3142 mo
176.553 39.0439 178.479 37.5474 180.969 38.3585 cv
183.743 39.2624 184.655 42.1485 183.782 44.7336 cv
183.535 45.4642 184.736 45.992 185.046 45.2665 cv
186.296 42.3398 185.299 38.8842 182.333 37.4386 cv
179.417 36.0176 175.975 37.3665 174.141 39.872 cv
173.947 40.1362 174.322 40.4823 174.583 40.3142 cv
174.583 40.3142 li
cp
f
184.304 45.4667 mo
192.395 43.8623 196.163 52.2744 196.231 58.9358 cv
196.277 63.4924 194.9 67.9973 192.663 71.9374 cv
187.916 80.2974 179.33 85.5726 170.383 88.4565 cv
161.247 91.4011 151.229 92.3872 141.939 89.5615 cv
132.983 86.8374 125.431 81.084 118.311 75.208 cv
117.196 74.2879 115.584 75.8646 116.706 76.8133 cv
125.572 84.3125 135.375 91.3978 147.153 93.1073 cv
158.617 94.7713 171.419 91.9626 181.341 86.0175 cv
190.211 80.7027 197.201 71.8444 198.08 61.2792 cv
198.747 53.2646 194.215 41.1325 184.1 44.7273 cv
183.635 44.8926 183.818 45.5631 184.304 45.4667 cv
184.304 45.4667 li
cp
f
115.638 23.4815 mo
110.545 21.7088 107.017 28.7746 105.963 32.6992 cv
104.497 38.1582 106.172 44.0387 111.586 46.4618 cv
112.588 46.9106 113.456 45.417 112.451 44.9819 cv
103.292 41.0205 105.773 25.0393 115.588 23.8507 cv
115.794 23.8257 115.849 23.5548 115.638 23.4815 cv
115.638 23.4815 li
cp
f
110.47 60.7275 mo
106.232 63.6025 103.676 68.7338 105.801 73.7387 cv
107.794 78.4338 113.383 80.2453 117.709 77.5622 cv
118.917 76.8131 117.794 74.8844 116.594 75.654 cv
112.355 78.3735 107.497 75.4978 106.619 70.8324 cv
105.893 66.9739 107.883 63.5064 110.698 61.0226 cv
110.857 60.8828 110.648 60.6072 110.47 60.7275 cv
110.47 60.7275 li
cp
f
112.252 45.9906 mo
108.323 44.2821 104.728 49.9295 104.071 53.178 cv
103.203 57.4727 106.122 61.8351 110.593 62.0391 cv
111.938 62.1004 111.91 60.0692 110.593 59.9643 cv
106.959 59.6749 105.176 56.0496 105.928 52.7687 cv
106.493 50.3044 109.019 45.7138 112.159 46.2104 cv
112.281 46.2296 112.388 46.0498 112.252 45.9906 cv
112.252 45.9906 li
cp
f
111.344 86.683 mo
112.306 88.5404 114.408 90.0397 116.569 89.4506 cv
118.697 88.8702 119.381 86.5981 118.258 84.7927 cv
117.164 83.0336 114.452 81.377 112.335 81.9808 cv
110.492 82.5065 109.526 84.8886 110.948 86.3379 cv
111.705 87.1088 112.849 85.9492 112.128 85.1579 cv
111.694 84.6804 112.054 83.9811 112.504 83.6748 cv
113.067 83.2914 113.935 83.4606 114.522 83.6713 cv
115.646 84.0743 117.013 85.0104 117.308 86.228 cv
117.665 87.7045 116.189 88.4444 114.905 88.2311 cv
113.672 88.0261 112.768 87.0401 111.828 86.3095 cv
111.561 86.1019 111.173 86.353 111.344 86.683 cv
111.344 86.683 li
cp
f
105.83 89.8958 mo
105.101 90.723 105.369 91.944 106.154 92.6484 cv
107.116 93.512 108.526 93.1812 109.221 92.158 cv
109.917 91.1327 109.809 89.72 108.849 88.9037 cv
107.896 88.0941 106.408 88.0372 105.394 88.7631 cv
104.625 89.3132 105.38 90.5985 106.137 90.0353 cv
107.003 89.3922 108.716 89.842 108.199 91.1631 cv
107.651 92.5631 105.825 91.5167 106.373 90.3148 cv
106.524 89.9849 106.111 89.5779 105.83 89.8958 cv
105.83 89.8958 li
cp
f
248.588 6.07594 mo
231.512 12.6942 218.221 26.74 212.015 43.9454 cv
206.094 60.3611 207.031 82.1817 225.648 89.4839 cv
244.84 97.0114 266.404 87.894 280.99 75.0969 cv
295.562 62.312 307.431 42.572 300.745 22.731 cv
297.494 13.081 290.095 5.74118 280.206 3.05064 cv
268.644 -.0952559 256.812 3.3978 246.857 9.46052 cv
245.496 10.2896 246.736 12.4288 248.109 11.6025 cv
257.075 6.20672 267.467 2.82635 277.97 5.08275 cv
287.43 7.11528 294.798 13.6629 298.092 22.7191 cv
304.652 40.7594 294.526 58.9431 281.621 71.2143 cv
268.815 83.3918 250.398 92.6569 232.332 89.0782 cv
222.39 87.109 214.505 81.2006 211.78 71.1845 cv
209.577 63.0895 210.612 54.3934 213.081 46.4895 cv
218.614 28.7812 232.07 14.31 248.762 6.48812 cv
248.991 6.381 248.827 5.98326 248.588 6.07594 cv
248.588 6.07594 li
cp
f
289.491 73.4616 mo
287.474 74.3708 284.571 76.8111 284.46 79.2252 cv
284.337 81.9047 287.556 82.3022 289.418 81.5019 cv
291.644 80.5449 294.106 78.1852 294.44 75.6681 cv
294.595 74.4955 293.969 73.483 292.894 73.0144 cv
291.552 72.4302 290.203 72.9616 288.948 73.5064 cv
287.751 74.0264 288.784 75.813 289.98 75.2719 cv
290.526 74.9719 291.109 74.7992 291.73 74.7538 cv
292.345 75.419 292.437 76.0473 292.007 76.6388 cv
291.825 77.1284 291.373 77.6537 291.043 78.0269 cv
290.228 78.9502 289.074 79.952 287.828 80.1453 cv
286.274 80.3865 285.648 79.2365 286.341 77.8574 cv
286.564 77.414 286.825 76.9853 287.113 76.581 cv
287.867 75.5202 288.821 74.7072 289.828 73.8984 cv
290.093 73.6855 289.755 73.3426 289.491 73.4616 cv
289.491 73.4616 li
cp
f
294.143 82.6774 mo
292.744 83.3903 291.089 84.7871 291.974 86.5573 cv
292.893 88.3951 295.446 87.543 296.613 86.4598 cv
297.835 85.3263 298.105 83.2248 296.75 82.071 cv
295.591 81.0845 293.521 81.6216 293.229 83.188 cv
293.065 84.062 294.318 84.4345 294.577 83.5596 cv
294.813 82.7606 295.818 82.9751 296.059 83.648 cv
296.342 84.4362 295.807 85.1962 295.179 85.6241 cv
294.556 86.0482 293.22 86.5301 293.132 85.3756 cv
293.063 84.4786 293.947 83.741 294.534 83.185 cv
294.811 82.9237 294.46 82.5155 294.143 82.6774 cv
294.143 82.6774 li
cp
f
316.278 46.9365 mo
319.054 58.9525 322.004 70.9519 330.322 80.4624 cv
331.214 81.4818 332.712 79.9843 331.811 78.9741 cv
323.879 70.0835 319.739 58.1604 316.626 46.8405 cv
316.564 46.6161 316.225 46.7105 316.278 46.9365 cv
316.278 46.9365 li
cp
f
316.537 46.1689 mo
329.059 37.6446 341.211 29.3332 355.163 23.2285 cv
369.791 16.8278 385.301 12.5827 401.133 10.5399 cv
402.534 10.3592 402.55 8.13078 401.133 8.31486 cv
385.718 10.3162 370.729 14.3476 356.443 20.4918 cv
342.128 26.6482 327.482 34.8569 316.273 45.8265 cv
316.1 45.9956 316.328 46.3111 316.537 46.1689 cv
316.537 46.1689 li
cp
f
400.862 9.84784 mo
401.621 27.4101 402.591 44.931 402.737 62.5151 cv
402.75 64.0526 405.141 64.0562 405.128 62.5151 cv
404.981 44.9019 404.173 27.187 401.718 9.73193 cv
401.65 9.24482 400.841 9.36186 400.862 9.84784 cv
400.862 9.84784 li
cp
f
331.196 80.1895 mo
346.093 78.0142 360.758 73.7053 375.642 71.2179 cv
377.041 70.9841 376.449 68.8516 375.055 69.0868 cv
360.469 71.5468 344.762 73.8275 330.937 79.2471 cv
330.345 79.4791 330.575 80.2803 331.196 80.1895 cv
331.196 80.1895 li
cp
f
375.07 70.6254 mo
377.809 73.2833 380.05 76.5196 382.504 79.4427 cv
385.291 82.7626 388.106 86.0573 390.921 89.353 cv
391.795 90.3757 393.276 88.8902 392.399 87.8753 cv
389.254 84.2337 386.118 80.5847 382.929 76.9817 cv
380.844 74.6265 378.581 70.9431 375.509 69.8716 cv
375.076 69.7205 374.758 70.3229 375.07 70.6254 cv
375.07 70.6254 li
cp
f
390.973 65.9303 mo
390.603 73.4662 390.961 81.1094 391.239 88.6459 cv
391.295 90.1721 393.69 90.1736 393.614 88.6459 cv
393.239 81.0507 392.924 73.3439 391.903 65.8044 cv
391.828 65.2537 390.997 65.4245 390.973 65.9303 cv
390.973 65.9303 li
cp
f
391.221 66.2403 mo
395.509 66.3281 399.7 64.3708 404 64.0904 cv
405.368 64.0012 405.367 61.8468 404 61.9556 cv
399.717 62.2964 394.7 63.17 391.017 65.4839 cv
390.676 65.6977 390.813 66.2319 391.221 66.2403 cv
391.221 66.2403 li
cp
f
.89141 127.981 mo
-.277177 141.31 .401787 154.898 1.27832 168.227 cv
1.34596 169.255 2.95979 169.26 2.88697 168.227 cv
1.94177 154.808 2.07141 141.41 1.61305 127.981 cv
1.59701 127.511 .931553 127.523 .89141 127.981 cv
.89141 127.981 li
cp
f
92.3042 127.981 mo
91.8458 141.41 91.9754 154.808 91.0302 168.227 cv
90.9575 169.259 92.5711 169.257 92.6389 168.227 cv
93.5154 154.898 94.1944 141.31 93.0258 127.981 cv
92.9857 127.524 92.3202 127.51 92.3042 127.981 cv
92.3042 127.981 li
cp
f
92.5072 128.298 mo
91.4101 117.101 76.3888 118.742 68.4377 118.873 cv
49.9117 119.18 31.3916 118.85 12.8657 118.63 cv
12.8657 119.192 12.8657 119.755 12.8657 120.317 cv
13.12 120.317 13.3744 120.317 13.6288 120.317 cv
13.6288 119.752 13.6288 119.188 13.6288 118.624 cv
7.71125 118.776 1.88145 121.917 .59306 128.056 cv
.352991 129.2 2.1158 129.686 2.34721 128.54 cv
3.43634 123.144 8.47602 120.489 13.6288 120.317 cv
14.7142 120.28 14.7226 118.615 13.6288 118.624 cv
13.3744 118.626 13.12 118.628 12.8657 118.63 cv
11.7804 118.639 11.7782 120.313 12.8657 120.317 cv
27.877 120.379 42.9019 120.645 57.9122 120.436 cv
64.6447 120.343 71.413 119.94 78.1449 120.098 cv
84.1996 120.24 90.6302 121.654 92.3891 128.314 cv
92.4059 128.377 92.514 128.367 92.5072 128.298 cv
92.5072 128.298 li
cp
f
64.4025 178.21 mo
69.9522 178.273 75.5019 178.339 81.0516 178.405 cv
81.0516 177.843 81.0516 177.281 81.0516 176.719 cv
80.7972 176.719 80.5428 176.719 80.2884 176.719 cv
80.2884 177.283 80.2884 177.847 80.2884 178.411 cv
86.6028 178.373 92.1432 175.596 92.6524 168.803 cv
92.7398 167.638 90.9115 167.637 90.8333 168.803 cv
90.436 174.722 85.43 176.648 80.2884 176.719 cv
79.2005 176.734 79.1971 178.42 80.2884 178.411 cv
80.5428 178.409 80.7972 178.407 81.0516 178.405 cv
82.1363 178.396 82.1385 176.723 81.0516 176.719 cv
75.5018 176.696 69.9522 176.673 64.4025 176.647 cv
63.3959 176.642 63.3954 178.199 64.4025 178.21 cv
64.4025 178.21 li
cp
f
1.41 168.738 mo
2.12076 175.435 8.09762 177.609 14.15 178.122 cv
26.1995 179.145 38.6296 177.886 50.7342 178.101 cv
51.7399 178.119 51.7422 176.536 50.7342 176.537 cv
41.0364 176.554 31.348 176.697 21.652 176.874 cv
14.3215 177.007 3.82765 177.721 1.52813 168.722 cv
1.51182 168.658 1.40269 168.669 1.41 168.738 cv
1.41 168.738 li
cp
f
50.6419 177.649 mo
53.8841 184.5 58.0716 191.078 62.5292 197.197 cv
63.0942 197.973 64.4012 197.218 63.8274 196.438 cv
59.2835 190.268 55.7434 183.496 51.4208 177.193 cv
51.0906 176.712 50.3935 177.124 50.6419 177.649 cv
50.6419 177.649 li
cp
f
64.1284 196.824 mo
65.3645 190.725 64.6093 184.034 64.802 177.834 cv
64.8443 176.472 62.7001 176.467 62.6822 177.834 cv
62.6012 184.008 62.2245 190.755 63.4905 196.824 cv
63.5561 197.139 64.0642 197.141 64.1284 196.824 cv
64.1284 196.824 li
cp
f
173.649 116.961 mo
168.305 107.162 156.472 103.937 146.865 109.675 cv
145.901 110.25 146.77 111.746 147.746 111.182 cv
156.813 105.939 167.42 108.402 173.208 117.219 cv
173.388 117.492 173.808 117.251 173.649 116.961 cv
173.649 116.961 li
cp
f
147.517 110.359 mo
143.804 105.192 136.402 105.604 130.932 107.427 cv
123.615 109.866 118.371 115.498 115.41 122.503 cv
109.565 136.335 112.822 154.842 127.899 161.05 cv
129.138 161.56 130.002 159.486 128.812 158.883 cv
116.593 152.699 112.562 139.186 116.417 126.429 cv
119.948 114.746 134.807 101.376 147.119 110.757 cv
147.348 110.932 147.682 110.589 147.517 110.359 cv
147.517 110.359 li
cp
f
128.308 159.559 mo
126.2 163.221 124.671 167.391 123.16 171.33 cv
122.763 172.366 124.417 172.803 124.817 171.787 cv
126.341 167.908 127.988 163.879 128.892 159.805 cv
128.969 159.46 128.495 159.234 128.308 159.559 cv
128.308 159.559 li
cp
f
123.91 172.839 mo
129.841 174.728 135.985 175.695 142.154 176.413 cv
143.263 176.542 143.267 174.783 142.154 174.667 cv
136.105 174.041 130.144 172.939 124.14 172.004 cv
123.6 171.92 123.367 172.666 123.91 172.839 cv
123.91 172.839 li
cp
f
142.91 175.101 mo
134.999 182.127 127.683 190.011 120.42 197.699 cv
119.7 198.462 120.828 199.598 121.575 198.853 cv
129.063 191.379 136.743 183.847 143.552 175.743 cv
143.927 175.298 143.352 174.709 142.91 175.101 cv
142.91 175.101 li
cp
f
121.47 199.164 mo
128.997 195.294 136.064 190.38 143.269 185.947 cv
150.508 181.494 157.785 177.099 164.954 172.534 cv
165.728 172.04 165.023 170.813 164.23 171.296 cv
156.97 175.717 149.816 180.312 142.624 184.844 cv
135.464 189.356 127.932 193.541 121.134 198.588 cv
120.794 198.84 121.08 199.365 121.47 199.164 cv
121.47 199.164 li
cp
f
138.738 164.617 mo
147.057 167.44 155.481 169.915 163.907 172.393 cv
164.96 172.702 165.414 171.051 164.36 170.75 cv
155.918 168.344 147.478 165.935 138.942 163.878 cv
138.46 163.762 138.273 164.459 138.738 164.617 cv
138.738 164.617 li
cp
f
138.84 164.602 mo
140.088 164.729 141.315 164.448 142.564 164.459 cv
143.815 164.47 144.99 164.574 146.181 164.097 cv
147.757 163.466 149.873 162.005 148.816 160.133 cv
148.303 159.226 146.865 160.065 147.419 160.95 cv
147.875 161.679 145.639 162.803 145.195 162.95 cv
144.287 163.249 143.305 163.189 142.366 163.267 cv
141.143 163.368 139.953 163.705 138.746 163.905 cv
138.322 163.976 138.474 164.565 138.84 164.602 cv
138.84 164.602 li
cp
f
174.18 118.334 mo
180.427 121.664 186.349 126.18 188.697 133.165 cv
190.881 139.661 189.158 146.903 185.203 152.336 cv
178.044 162.171 159.103 168.635 148.99 159.669 cv
147.802 158.615 146.042 160.376 147.244 161.415 cv
158.499 171.143 178.994 164.677 186.95 153.517 cv
196.323 140.368 190.094 122.163 174.345 117.945 cv
174.116 117.884 173.963 118.219 174.18 118.334 cv
174.18 118.334 li
cp
f
221.613 108.592 mo
214.278 110.863 211.719 118.263 210.619 125.215 cv
209.138 134.569 208.411 144.288 209.645 153.707 cv
211.749 169.772 220.912 185.615 237.477 189.875 cv
238.858 190.23 239.447 188.092 238.065 187.74 cv
223.33 183.987 214.425 170.215 211.809 155.923 cv
210.339 147.889 210.567 139.611 211.349 131.514 cv
212.182 122.891 213.274 113.475 221.783 108.994 cv
222.003 108.878 221.852 108.518 221.613 108.592 cv
221.613 108.592 li
cp
f
237.878 189.076 mo
239.757 201.561 256.575 200.603 260.712 190.194 cv
261.186 189.002 259.27 188.496 258.796 189.665 cv
254.608 199.997 242.651 197.452 238.605 188.77 cv
238.398 188.327 237.817 188.67 237.878 189.076 cv
237.878 189.076 li
cp
f
221.823 109.338 mo
227.912 106.338 233.387 106.622 237.859 112.107 cv
238.425 112.801 239.575 111.9 239.096 111.153 cv
235.435 105.438 226.319 103.504 221.453 108.859 cv
221.216 109.12 221.512 109.492 221.823 109.338 cv
221.823 109.338 li
cp
f
238.1 112.405 mo
250.961 110.322 263.632 106.348 276.659 109.841 cv
288.993 113.148 297.683 122.469 299.07 135.295 cv
301.634 158.99 284.385 186.569 259.772 189.504 cv
258.146 189.698 258.139 192.281 259.772 192.073 cv
285.954 188.738 304.522 159.251 300.819 133.83 cv
299.126 122.206 291.71 113.241 280.719 109.174 cv
267.095 104.133 251.185 106.88 237.934 111.802 cv
237.554 111.944 237.704 112.469 238.1 112.405 cv
238.1 112.405 li
cp
f
289.082 180.024 mo
287.005 181.539 284.945 183.096 282.961 184.732 cv
281.92 185.59 280.616 186.719 280.897 188.244 cv
281.621 192.175 287.376 190.453 289.491 189.143 cv
292.344 187.375 296.103 184.04 294.473 180.295 cv
292.929 176.75 289.513 178.035 287.358 180.118 cv
286.6 180.85 287.746 181.989 288.512 181.272 cv
289.819 180.048 292.27 178.807 293.039 181.334 cv
293.453 182.693 292.686 184.065 291.816 185.062 cv
290.535 186.53 288.811 187.809 287.023 188.56 cv
285.902 189.031 281.463 190.172 283.017 186.362 cv
283.258 185.773 284.377 185.107 284.822 184.696 cv
286.356 183.279 287.871 181.844 289.348 180.369 cv
289.519 180.199 289.289 179.872 289.082 180.024 cv
289.082 180.024 li
cp
f
292.908 191.36 mo
291.716 191.116 291.248 192.657 291.53 193.57 cv
292.048 195.246 294.213 195.052 295.352 194.196 cv
296.662 193.21 297.461 190.844 295.693 189.861 cv
293.889 188.857 292.284 190.49 291.294 191.813 cv
290.732 192.563 292.005 193.307 292.556 192.55 cv
293.033 191.896 293.667 190.974 294.58 190.999 cv
295.817 191.032 295.282 192.48 294.726 193.025 cv
294.205 193.534 293.011 194.079 292.435 193.352 cv
291.98 192.777 292.249 191.883 292.908 191.634 cv
293.026 191.589 293.058 191.391 292.908 191.36 cv
292.908 191.36 li
cp
f
319.078 126.614 mo
345.347 135.219 374.071 135.104 400.802 128.672 cv
402.098 128.361 401.549 126.356 400.251 126.674 cv
373.33 133.27 346.119 132.221 319.236 126.039 cv
318.861 125.953 318.713 126.494 319.078 126.614 cv
319.078 126.614 li
cp
f
318.448 126.757 mo
322.988 145.661 332.932 163.477 344.538 178.909 cv
345.343 179.979 347.169 178.924 346.352 177.849 cv
334.391 162.12 326.303 144.879 319.173 126.557 cv
319.001 126.114 318.332 126.276 318.448 126.757 cv
318.448 126.757 li
cp
f
345.43 179.129 mo
355.793 175.397 365.789 170.241 375.481 165.043 cv
376.564 164.463 375.607 162.845 374.521 163.401 cv
364.742 168.405 354.694 172.971 345.041 178.208 cv
344.549 178.475 344.885 179.325 345.43 179.129 cv
345.43 179.129 li
cp
f
384.481 187.179 mo
376.015 182.864 372.7 173.801 375.882 164.924 cv
376.378 163.539 374.201 162.968 373.692 164.32 cv
370.042 174.009 374.692 184.009 384.235 187.763 cv
384.571 187.895 384.801 187.343 384.481 187.179 cv
384.481 187.179 li
cp
f
387.962 159.255 mo
382.151 166.071 378.025 179.508 383.64 187.514 cv
384.26 188.398 385.728 187.549 385.098 186.661 cv
379.823 179.224 384.022 166.596 388.686 159.814 cv
388.98 159.386 388.302 158.855 387.962 159.255 cv
387.962 159.255 li
cp
f
388.53 159.539 mo
393.775 157.679 398.635 154.651 403.706 152.354 cv
404.655 151.924 403.831 150.536 402.889 150.957 cv
397.885 153.193 392.453 155.493 388.289 159.124 cv
388.105 159.284 388.299 159.621 388.53 159.539 cv
388.53 159.539 li
cp
f
400.296 126.596 mo
401.182 134.811 402.323 142.87 402.58 151.146 cv
402.619 152.412 404.583 152.42 404.553 151.146 cv
404.356 142.882 403.461 134.427 401.034 126.496 cv
400.916 126.11 400.248 126.157 400.296 126.596 cv
400.296 126.596 li
cp
f
116.334 251.844 mo
116.999 254.824 116.206 257.86 118.605 260.192 cv
120.337 261.875 122.867 262.39 125.173 262.659 cv
128.294 263.022 131.425 262.699 134.549 262.583 cv
140.221 262.374 145.934 262.613 151.608 262.7 cv
162.508 262.866 173.454 263.035 184.332 263.77 cv
190.561 264.191 196.56 263.336 197.41 255.925 cv
197.935 251.355 196.839 246.241 196.711 241.623 cv
196.561 236.191 197.059 230.761 196.9 225.347 cv
196.71 218.897 194.083 213.892 187.161 213.592 cv
182.669 213.396 178.032 214.066 173.529 214.13 cv
167.619 214.215 161.709 214.237 155.799 214.196 cv
150.176 214.157 144.507 214.226 138.893 213.879 cv
134.377 213.601 129.774 212.628 125.248 213.328 cv
122.151 213.806 119.232 215.152 117.466 217.88 cv
116.255 219.752 116.845 220.791 117.041 222.845 cv
117.324 225.803 117.107 228.904 117.04 231.868 cv
116.975 234.763 117.671 236.295 115.055 237.628 cv
112.181 239.093 105.965 241.072 104.921 244.376 cv
104.815 244.712 104.987 245.176 105.312 245.336 cv
108.956 247.136 113.812 248.422 115.958 252.165 cv
116.481 253.079 117.864 252.266 117.367 251.341 cv
115.359 247.6 111.541 246.881 108.17 244.815 cv
106.877 244.023 106.845 244.978 107.331 243.994 cv
107.786 243.071 110.136 242.261 111.108 241.705 cv
113.396 240.396 115.719 239.091 118.126 238.011 cv
118.399 237.889 118.534 237.555 118.546 237.278 cv
118.705 233.672 118.8 230.064 118.784 226.454 cv
118.774 224.208 118.15 221.36 118.884 219.344 cv
121.324 212.65 132.122 215.018 137.496 215.46 cv
152.424 216.685 168.241 216.517 183.17 215.418 cv
187.14 215.126 191.553 214.852 193.879 218.822 cv
195.837 222.164 195.273 226.746 195.09 230.448 cv
194.712 238.097 195.578 245.609 195.791 253.219 cv
196.105 264.474 185.873 262.141 178.247 261.853 cv
170.329 261.554 162.407 261.362 154.485 261.256 cv
146.995 261.156 139.483 261.016 132.004 261.458 cv
129.088 261.631 126.015 261.852 123.146 261.171 cv
121.256 260.722 119.254 259.866 118.242 258.066 cv
117.247 256.296 117.578 253.654 116.991 251.663 cv
116.866 251.241 116.238 251.416 116.334 251.844 cv
cp
f
106.585 273.949 mo
106 278.56 106.123 283.237 105.83 287.869 cv
105.642 290.836 105.126 293.785 105.16 296.766 cv
105.214 301.413 106.674 305.347 111.518 306.523 cv
111.628 306.126 111.737 305.728 111.847 305.331 cv
111.736 305.312 111.625 305.293 111.514 305.274 cv
111.459 305.679 111.404 306.084 111.349 306.489 cv
132.433 305.457 153.526 305.103 174.633 305.259 cv
178.357 305.286 183.372 305.777 185.07 301.485 cv
186.326 298.31 185.17 295.038 188.074 292.462 cv
190.333 290.46 193.836 290.858 196.094 288.969 cv
198.648 286.833 196.145 285.062 194.072 283.764 cv
191.88 282.392 189.461 281.232 187.081 280.221 cv
184.532 279.138 185.478 279.361 185.198 276.506 cv
184.737 271.807 183.049 268.515 178.153 267.585 cv
173.968 266.791 169.323 267.681 165.102 267.803 cv
159.935 267.952 154.766 268.052 149.597 268.105 cv
139.56 268.206 129.456 268.339 119.432 267.767 cv
114.369 267.478 106.777 267.14 106.633 273.949 cv
106.628 274.172 106.983 274.295 107.08 274.07 cv
110.02 267.249 118.104 269.261 124.052 269.407 cv
131.652 269.594 139.259 269.614 146.86 269.561 cv
154.132 269.51 161.431 269.476 168.694 269.106 cv
172.672 268.903 177.565 267.836 180.913 270.441 cv
184.035 272.869 183.791 276.479 184.016 280.171 cv
184.039 280.552 184.321 280.878 184.722 280.878 cv
186.806 280.877 189.678 282.947 191.473 283.91 cv
193.01 284.734 195.446 285.6 194.996 287.323 cv
194.549 289.036 191.673 289.152 190.165 289.749 cv
188.023 290.596 185.681 291.896 184.757 294.127 cv
184.246 295.361 184.366 296.665 184.219 297.96 cv
184.101 298.996 184.145 300.935 183.462 301.713 cv
182.085 303.282 178.662 303.369 176.887 303.6 cv
167.661 304.801 157.401 303.8 147.926 303.951 cv
135.726 304.147 123.533 304.603 111.349 305.252 cv
110.694 305.286 110.459 306.345 111.185 306.467 cv
111.296 306.486 111.407 306.504 111.518 306.523 cv
112.288 306.654 112.635 305.511 111.847 305.331 cv
105.342 303.843 106.079 296.752 106.521 291.558 cv
107.02 285.694 106.78 279.815 107.161 273.949 cv
107.186 273.571 106.63 273.591 106.585 273.949 cv
cp
f
250.246 218.081 mo
237.449 207.901 222.583 222.151 216.253 232.665 cv
208.46 245.611 205.125 261.967 218.891 272.286 cv
219.838 272.996 221.102 271.376 220.166 270.633 cv
208.126 261.08 210.132 247.112 216.95 234.967 cv
223.719 222.91 235.301 211.627 249.872 218.565 cv
250.163 218.703 250.539 218.314 250.246 218.081 cv
250.246 218.081 li
cp
f
219.293 271.459 mo
212.874 278.507 215.831 289.7 222.902 295.182 cv
230.764 301.278 243.041 300.129 246.641 289.946 cv
247.139 288.536 244.948 287.976 244.423 289.335 cv
240.644 299.116 228.525 298.184 222.154 291.641 cv
217.024 286.372 215.991 278.128 219.907 271.932 cv
220.142 271.56 219.594 271.128 219.293 271.459 cv
219.293 271.459 li
cp
f
245.927 289.54 mo
244.142 299.028 257.948 303.127 265.131 303.182 cv
275.511 303.262 285.351 297.888 291.75 289.875 cv
304.854 273.465 300.395 248.858 282.65 237.717 cv
281.205 236.81 279.922 239.056 281.322 239.988 cv
295.754 249.598 301.495 268.889 292.524 284.211 cv
288.401 291.252 281.689 296.876 273.884 299.36 cv
270.07 300.573 266.002 301.026 262.017 300.607 cv
256.292 300.005 246.833 296.73 246.547 289.624 cv
246.534 289.286 245.996 289.174 245.927 289.54 cv
245.927 289.54 li
cp
f
299.493 224.136 mo
294.541 216.838 285.269 214.46 276.997 213.322 cv
267.741 212.048 258.076 212.634 250.134 217.987 cv
249.091 218.69 250.057 220.383 251.128 219.688 cv
258.617 214.826 267.243 214.029 275.958 214.961 cv
284.521 215.877 292.999 217.911 298.962 224.546 cv
299.216 224.828 299.71 224.456 299.493 224.136 cv
299.493 224.136 li
cp
f
281.542 238.868 mo
288.076 234 283.159 224.73 276.076 224.206 cv
274.952 224.123 274.941 225.912 276.076 225.965 cv
279.14 226.109 281.977 227.971 282.88 231.004 cv
283.693 233.73 282.747 236.292 281.234 238.559 cv
281.113 238.74 281.36 239.004 281.542 238.868 cv
281.542 238.868 li
cp
f
298.912 225.001 mo
298.514 221.481 293.659 220.775 290.731 220.397 cv
285.357 219.704 279.973 220.98 275.404 223.842 cv
274.462 224.432 275.336 225.936 276.276 225.335 cv
281.623 221.922 293.749 218.493 298.478 225.118 cv
298.596 225.284 298.941 225.255 298.912 225.001 cv
298.912 225.001 li
cp
f
314.808 247.137 mo
318.135 261.182 320.811 276.032 326.008 289.525 cv
326.355 290.426 327.788 290.077 327.487 289.117 cv
323.117 275.196 320.268 260.72 315.37 246.982 cv
315.245 246.631 314.72 246.767 314.808 247.137 cv
314.808 247.137 li
cp
f
315.171 247.357 mo
343.909 238.724 371.983 227.323 400.167 217.047 cv
401.448 216.58 400.892 214.515 399.6 214.99 cv
371.377 225.364 342.523 234.814 314.933 246.793 cv
314.611 246.933 314.841 247.456 315.171 247.357 cv
315.171 247.357 li
cp
f
400.231 216.017 mo
394.294 244.78 386.401 273.622 377.564 301.625 cv
377.105 303.08 379.395 303.707 379.847 302.254 cv
384.216 288.187 387.871 273.886 391.485 259.611 cv
395.108 245.294 398.892 230.884 401.18 216.278 cv
401.276 215.667 400.361 215.387 400.231 216.017 cv
400.231 216.017 li
cp
f
326.747 289.713 mo
327.252 289.713 327.252 288.929 326.747 288.929 cv
326.243 288.929 326.242 289.713 326.747 289.713 cv
326.747 289.713 li
cp
f
326.915 289.735 mo
342.857 287.26 358.71 284.277 374.575 281.361 cv
376.082 281.084 375.444 278.785 373.942 279.063 cv
358.101 281.987 342.248 284.843 326.494 288.208 cv
325.481 288.424 325.93 289.888 326.915 289.735 cv
326.915 289.735 li
cp
f
374.223 279.918 mo
374.471 287.224 375.299 295.288 377.966 302.144 cv
378.321 303.056 379.812 302.65 379.445 301.736 cv
376.654 294.786 376.328 287.106 374.813 279.838 cv
374.744 279.507 374.212 279.581 374.223 279.918 cv
374.223 279.918 li
cp
f
3.20408 243.063 mo
4.66583 237.198 10.6795 233.227 16.5845 235.65 cv
17.5708 236.055 18.0216 234.433 17.0276 234.043 cv
10.802 231.598 2.50295 235.906 2.04164 242.905 cv
1.99753 243.574 3.04409 243.704 3.20408 243.063 cv
3.20408 243.063 li
cp
f
17.6187 235.927 mo
22.2467 222.568 35.1021 216.577 48.5867 216.339 cv
61.099 216.118 74.182 218.898 82.5482 228.886 cv
98.2923 247.682 90.2885 284.129 64.0861 288.773 cv
62.734 289.013 63.0296 291.366 64.4141 291.196 cv
77.618 289.575 87.1877 277.238 91.0935 265.305 cv
95.2741 252.533 93.2113 238.351 84.5936 227.88 cv
75.0947 216.337 59.3967 213.124 45.0572 214.357 cv
32.6828 215.421 19.0143 222.273 16.831 235.71 cv
16.7476 236.223 17.4438 236.432 17.6187 235.927 cv
17.6187 235.927 li
cp
f
63.4308 290.297 mo
62.1421 297.162 66.7485 303.845 73.0818 306.194 cv
74.371 306.672 74.9274 304.611 73.649 304.136 cv
67.7372 301.944 64.5127 296.517 64.1839 290.398 cv
64.162 289.991 63.5148 289.849 63.4308 290.297 cv
63.4308 290.297 li
cp
f
48.3286 291.881 mo
51.2628 302.062 62.4876 308.839 72.8918 306.84 cv
73.9136 306.644 73.6957 304.911 72.6436 305.006 cv
62.306 305.939 53.5027 301.007 48.9989 291.598 cv
48.8177 291.22 48.2151 291.487 48.3286 291.881 cv
48.3286 291.881 li
cp
f
2.08559 241.547 mo
-4.24893 255.632 4.70206 273.335 17.4217 280.256 cv
18.63 280.913 19.7132 279.053 18.4987 278.413 cv
4.56331 271.072 .234845 256.453 2.64926 241.784 cv
2.70083 241.471 2.24117 241.201 2.08559 241.547 cv
2.08559 241.547 li
cp
f
17.7376 280.514 mo
15.7169 289.287 20.4446 298.288 28.8106 301.647 cv
36.6361 304.789 46.6843 302.452 49.7139 293.968 cv
50.2374 292.501 47.8975 291.864 47.3831 293.325 cv
44.5849 301.274 34.1337 302.336 27.5692 298.662 cv
20.8808 294.92 18.3002 288.01 18.9 280.671 cv
18.9544 280.005 17.8863 279.868 17.7376 280.514 cv
17.7376 280.514 li
cp
f
8.28747 38.5959 mo
6.77041 44.712 6.78122 50.8464 8.31618 56.9579 cv
8.3868 57.2391 8.82441 57.1197 8.7511 56.838 cv
7.17425 50.7793 7.11522 44.7617 8.57016 38.6738 cv
8.61396 38.4905 8.33298 38.4124 8.28747 38.5959 cv
8.28747 38.5959 li
cp
f
8.76237 47.1439 mo
8.48303 51.2537 9.03326 55.2064 10.3433 59.1087 cv
10.4525 59.4338 10.9736 59.29 10.858 58.9668 cv
9.48902 55.1393 8.92096 51.2027 9.07057 47.1439 cv
9.07792 46.9444 8.77571 46.9476 8.76237 47.1439 cv
8.76237 47.1439 li
cp
f
77.418 53.6477 mo
79.3553 51.9891 80.6231 49.6249 81.3709 47.2163 cv
81.4816 46.8599 80.9219 46.7067 80.8128 47.0625 cv
80.0646 49.5008 78.7778 51.4557 77.2001 53.4298 cv
77.0773 53.5835 77.2649 53.7788 77.418 53.6477 cv
77.418 53.6477 li
cp
f
77.4161 51.4633 mo
80.5665 46.7266 82.2911 41.3385 82.6863 35.6778 cv
82.7129 35.2959 82.1208 35.2988 82.0924 35.6778 cv
81.6703 41.3192 79.9466 46.4001 77.0332 51.2395 cv
76.8847 51.4862 77.2592 51.6993 77.4161 51.4633 cv
77.4161 51.4633 li
cp
f
109.547 68.8073 mo
108.881 70.6034 110.158 72.6643 112.034 72.9526 cv
112.377 73.0053 112.448 72.5193 112.098 72.4801 cv
110.406 72.2904 109.307 70.4662 109.757 68.8652 cv
109.795 68.7281 109.595 68.6778 109.547 68.8073 cv
109.547 68.8073 li
cp
f
111.476 69.647 mo
111.334 71.0319 112.441 72.2636 113.807 72.3661 cv
114.133 72.3906 114.138 71.8641 113.807 71.855 cv
112.654 71.823 111.751 70.7845 111.814 69.647 cv
111.826 69.4268 111.498 69.4344 111.476 69.647 cv
111.476 69.647 li
cp
f
108.178 53.9073 mo
107.845 55.3939 108.329 56.8443 109.399 57.9202 cv
109.611 58.1332 109.944 57.7996 109.729 57.5906 cv
108.734 56.6279 108.311 55.3109 108.429 53.9412 cv
108.441 53.7977 108.209 53.7675 108.178 53.9073 cv
108.178 53.9073 li
cp
f
110.317 54.7665 mo
109.855 56.1426 111.09 57.6747 112.531 57.5344 cv
112.796 57.5085 112.791 57.0869 112.531 57.1209 cv
111.306 57.2811 110.237 56.0278 110.592 54.8424 cv
110.645 54.6651 110.375 54.5934 110.317 54.7665 cv
110.317 54.7665 li
cp
f
109.483 37.397 mo
109.759 38.2483 110.035 39.0997 110.311 39.951 cv
110.351 40.0751 110.549 40.0207 110.506 39.8971 cv
110.216 39.0497 109.926 38.2024 109.635 37.355 cv
109.603 37.2597 109.451 37.2996 109.483 37.397 cv
109.483 37.397 li
cp
f
111.091 38.6499 mo
110.999 39.6379 111.342 40.5831 111.954 41.3508 cv
112.125 41.5644 112.435 41.2592 112.257 41.0478 cv
111.676 40.3579 111.427 39.5446 111.422 38.6499 cv
111.42 38.4336 111.11 38.4413 111.091 38.6499 cv
111.091 38.6499 li
cp
f
165.7 12.6956 mo
167.719 16.4508 168.907 20.3793 169.168 24.6391 cv
169.184 24.8992 169.593 24.8995 169.574 24.6391 cv
169.263 20.3564 168.061 16.2935 165.869 12.597 cv
165.804 12.4885 165.64 12.5848 165.7 12.6956 cv
165.7 12.6956 li
cp
f
168.686 15.2395 mo
170.488 20.5654 170.885 25.8595 169.55 31.3454 cv
169.476 31.6511 169.95 31.7815 170.021 31.4753 cv
171.297 26.0095 171.039 20.4011 168.94 15.1696 cv
168.878 15.0164 168.631 15.0759 168.686 15.2395 cv
168.686 15.2395 li
cp
f
161.825 88.4746 mo
171.28 86.9538 179.631 82.7564 186.574 76.1697 cv
186.792 75.9629 186.462 75.6334 186.244 75.8402 cv
179.391 82.3559 171.066 86.5563 161.781 88.3151 cv
161.676 88.3351 161.722 88.4912 161.825 88.4746 cv
161.825 88.4746 li
cp
f
169.851 83.5908 mo
177.179 81.9786 183.478 78.0561 188.166 72.1832 cv
188.404 71.8842 187.984 71.456 187.74 71.7579 cv
183.094 77.5129 176.955 81.5033 169.803 83.4169 cv
169.69 83.447 169.738 83.6157 169.851 83.5908 cv
169.851 83.5908 li
cp
f
213.391 56.8591 mo
212.295 61.7334 212.697 66.6777 214.239 71.4072 cv
214.339 71.7143 214.827 71.5816 214.724 71.2733 cv
213.14 66.533 212.89 61.842 213.615 56.9211 cv
213.637 56.7769 213.424 56.7094 213.391 56.8591 cv
213.391 56.8591 li
cp
f
214.105 61.1332 mo
213.578 67.7956 215.42 74.1257 219.436 79.4682 cv
219.609 79.6984 220.002 79.4696 219.826 79.2405 cv
215.761 73.9616 213.869 67.7847 214.278 61.1332 cv
214.285 61.0216 214.114 61.0232 214.105 61.1332 cv
214.105 61.1332 li
cp
f
289.106 16.62 mo
290.604 19.6024 291.693 22.7024 292.428 25.9557 cv
292.476 26.1726 292.811 26.0808 292.761 25.8638 cv
292.009 22.5938 290.84 19.4861 289.288 16.5138 cv
289.225 16.3933 289.045 16.4995 289.106 16.62 cv
289.106 16.62 li
cp
f
289.346 14.7571 mo
292.47 19.8908 293.893 25.4029 293.444 31.4147 cv
293.42 31.7475 293.939 31.7464 293.963 31.4147 cv
294.399 25.4168 292.96 19.6162 289.599 14.6091 cv
289.495 14.4539 289.247 14.5942 289.346 14.7571 cv
289.346 14.7571 li
cp
f
321.24 51.4471 mo
322.323 57.3546 324.579 62.9199 327.651 68.0645 cv
327.802 68.3176 328.199 68.0867 328.047 67.833 cv
324.939 62.6735 322.888 57.2188 321.523 51.3691 cv
321.479 51.1835 321.206 51.2638 321.24 51.4471 cv
321.24 51.4471 li
cp
f
322.925 50.5612 mo
323.657 56.8609 326.216 62.855 329.758 68.0727 cv
329.939 68.3395 330.376 68.0871 330.193 67.8185 cv
326.551 62.4799 324.473 56.8196 323.139 50.5323 cv
323.114 50.4142 322.911 50.4381 322.925 50.5612 cv
322.925 50.5612 li
cp
f
347.377 30.5962 mo
347.397 30.5962 347.397 30.5661 347.377 30.5661 cv
347.358 30.5661 347.358 30.5962 347.377 30.5962 cv
347.377 30.5962 li
cp
f
345.158 32.1125 mo
358.128 25.1593 371.611 20.0046 386.102 17.2907 cv
386.443 17.2267 386.299 16.7032 385.958 16.7688 cv
371.621 19.5265 357.633 24.4618 345.086 31.9892 cv
345.007 32.0366 345.077 32.1559 345.158 32.1125 cv
345.158 32.1125 li
cp
f
352.507 29.3463 mo
363.578 24.2155 374.954 20.3779 386.937 18.0409 cv
387.345 17.9612 387.172 17.3393 386.765 17.4175 cv
374.812 19.7147 363.194 23.5328 352.328 29.0412 cv
352.124 29.145 352.303 29.4407 352.507 29.3463 cv
352.507 29.3463 li
cp
f
397.227 135.114 mo
397.664 137.662 398.089 140.211 398.552 142.754 cv
398.594 142.982 398.94 142.885 398.9 142.658 cv
398.451 140.115 397.963 137.58 397.488 135.042 cv
397.456 134.871 397.198 134.944 397.227 135.114 cv
397.227 135.114 li
cp
f
398.218 133.356 mo
398.254 136.931 398.521 140.48 399.014 144.021 cv
399.046 144.249 399.396 144.154 399.362 143.925 cv
398.833 140.418 398.535 136.901 398.459 133.356 cv
398.455 133.202 398.217 133.201 398.218 133.356 cv
398.218 133.356 li
cp
f
325.665 135.066 mo
326.63 140.036 328.689 144.47 331.967 148.341 cv
332.098 148.495 332.325 148.27 332.19 148.117 cv
328.886 144.374 326.648 139.968 325.694 135.058 cv
325.69 135.039 325.661 135.047 325.665 135.066 cv
325.665 135.066 li
cp
f
326.773 133.418 mo
329.124 141.447 332.818 148.856 337.888 155.52 cv
338.041 155.721 338.388 155.522 338.232 155.319 cv
333.15 148.666 329.393 141.389 326.991 133.358 cv
326.949 133.219 326.732 133.278 326.773 133.418 cv
326.773 133.418 li
cp
f
329.873 133.94 mo
331.671 134.711 333.534 135.157 335.486 135.28 cv
335.776 135.299 335.776 134.843 335.486 134.829 cv
333.586 134.737 331.772 134.327 330.015 133.603 cv
329.823 133.524 329.681 133.858 329.873 133.94 cv
329.873 133.94 li
cp
f
331.569 133.096 mo
333.645 134.006 335.783 134.587 338.035 134.838 cv
338.309 134.869 338.307 134.44 338.035 134.41 cv
335.846 134.165 333.739 133.618 331.708 132.766 cv
331.522 132.688 331.382 133.014 331.569 133.096 cv
331.569 133.096 li
cp
f
394.941 227.409 mo
395.018 227.409 395.019 227.289 394.941 227.289 cv
394.864 227.289 394.863 227.409 394.941 227.409 cv
394.941 227.409 li
cp
f
394.666 226.839 mo
391.839 233.596 390.126 240.913 388.747 248.087 cv
388.677 248.451 389.236 248.606 389.305 248.241 cv
390.691 240.951 392.872 234.02 394.992 226.928 cv
395.057 226.714 394.748 226.644 394.666 226.839 cv
394.666 226.839 li
cp
f
391.744 229.838 mo
390.017 238.039 388.251 246.233 386.537 254.438 cv
386.454 254.835 387.064 255.004 387.146 254.606 cv
388.826 246.389 390.454 238.161 392.121 229.942 cv
392.171 229.696 391.796 229.591 391.744 229.838 cv
391.744 229.838 li
cp
f
322.594 261.362 mo
323.263 264.77 323.989 268.165 324.698 271.564 cv
324.753 271.829 325.163 271.717 325.103 271.452 cv
324.347 268.067 323.608 264.678 322.812 261.302 cv
322.778 261.16 322.566 261.221 322.594 261.362 cv
322.594 261.362 li
cp
f
322.678 257.936 mo
324.368 262.945 325.582 268.045 326.33 273.278 cv
326.372 273.573 326.823 273.448 326.78 273.154 cv
326.002 267.926 324.759 262.834 323.04 257.836 cv
322.962 257.609 322.6 257.706 322.678 257.936 cv
322.678 257.936 li
cp
f
221.092 281.322 mo
221.565 284.429 222.706 287.283 224.503 289.859 cv
224.63 290.04 224.931 289.866 224.802 289.684 cv
222.997 287.143 221.847 284.328 221.353 281.25 cv
221.326 281.078 221.067 281.152 221.092 281.322 cv
221.092 281.322 li
cp
f
222.869 281.283 mo
222.697 285.267 224.898 288.931 228.299 290.922 cv
228.571 291.081 228.82 290.654 228.546 290.5 cv
225.124 288.58 223.214 285.159 223.042 281.283 cv
223.037 281.172 222.873 281.171 222.869 281.283 cv
222.869 281.283 li
cp
f
216.915 249.071 mo
218.042 241.734 220.688 235.126 225.311 229.279 cv
225.525 229.008 225.142 228.622 224.928 228.896 cv
220.34 234.763 217.366 241.589 216.598 249.028 cv
216.579 249.207 216.888 249.251 216.915 249.071 cv
216.915 249.071 li
cp
f
220.514 243.093 mo
221.808 237.667 224.413 232.876 228.235 228.814 cv
228.447 228.588 228.106 228.246 227.895 228.474 cv
224.061 232.605 221.502 237.529 220.29 243.031 cv
220.257 243.177 220.479 243.24 220.514 243.093 cv
220.514 243.093 li
cp
f
276.058 230.305 mo
276.343 231.011 276.627 231.718 276.912 232.425 cv
276.941 232.496 277.058 232.464 277.028 232.393 cv
276.734 231.689 276.44 230.985 276.145 230.281 cv
276.123 230.228 276.037 230.251 276.058 230.305 cv
276.058 230.305 li
cp
f
276.816 229.537 mo
277.962 231.002 278.647 232.718 278.822 234.57 cv
278.842 234.781 279.175 234.781 279.153 234.57 cv
278.942 232.627 278.206 230.901 276.944 229.409 cv
276.868 229.319 276.747 229.447 276.816 229.537 cv
276.816 229.537 li
cp
f
277.478 294.737 mo
282.54 291.629 286.451 287.208 288.927 281.807 cv
289.061 281.514 288.624 281.258 288.492 281.553 cv
286.086 286.903 282.261 291.301 277.299 294.432 cv
277.108 294.553 277.283 294.857 277.478 294.737 cv
277.478 294.737 li
cp
f
282.234 287.909 mo
286.349 283.839 289.17 278.853 290.667 273.271 cv
290.764 272.91 290.201 272.756 290.109 273.117 cv
288.695 278.684 285.981 283.55 282.085 287.76 cv
281.994 287.86 282.137 288.005 282.234 287.909 cv
282.234 287.909 li
cp
f
243.881 190.788 mo
244.674 193.045 247.011 194.293 249.343 193.883 cv
249.737 193.814 249.572 193.209 249.178 193.282 cv
247.106 193.667 245.071 192.541 244.135 190.681 cv
244.065 190.542 243.828 190.639 243.881 190.788 cv
243.881 190.788 li
cp
f
246.945 191.664 mo
247.585 192.568 248.596 193.062 249.701 193.05 cv
250.026 193.047 250.026 192.536 249.701 192.547 cv
248.732 192.578 247.879 192.16 247.258 191.422 cv
247.114 191.251 246.815 191.479 246.945 191.664 cv
246.945 191.664 li
cp
f
290.358 127.476 mo
291.429 129.328 292.028 131.196 291.921 133.356 cv
291.906 133.664 292.393 133.666 292.403 133.356 cv
292.468 131.197 291.909 129.031 290.577 127.307 cv
290.479 127.18 290.281 127.342 290.358 127.476 cv
290.358 127.476 li
cp
f
289.419 122.193 mo
295.032 133.21 295.778 145.444 291.389 157.027 cv
291.267 157.349 291.782 157.486 291.904 157.169 cv
296.332 145.673 295.549 132.899 289.607 122.083 cv
289.539 121.96 289.355 122.069 289.419 122.193 cv
289.419 122.193 li
cp
f
132.813 159.746 mo
133.267 160.569 134.1 161.063 135.039 161.073 cv
135.213 161.075 135.213 160.802 135.039 160.803 cv
134.186 160.805 133.437 160.37 133.015 159.628 cv
132.94 159.498 132.741 159.614 132.813 159.746 cv
132.813 159.746 li
cp
f
133.936 158.991 mo
134.58 159.92 135.609 160.423 136.738 160.41 cv
137.139 160.406 137.139 159.774 136.738 159.786 cv
135.786 159.816 134.948 159.402 134.332 158.685 cv
134.147 158.471 133.773 158.755 133.936 158.991 cv
133.936 158.991 li
cp
f
124.925 121.644 mo
120.799 127.058 120.153 134.075 123.08 140.202 cv
123.218 140.491 123.641 140.238 123.508 139.951 cv
120.708 133.915 121.38 127.234 125.198 121.804 cv
125.316 121.635 125.045 121.487 124.925 121.644 cv
124.925 121.644 li
cp
f
123.311 126.914 mo
122.034 131.736 122.917 136.704 125.763 140.8 cv
125.976 141.108 126.483 140.818 126.269 140.505 cv
123.511 136.45 122.619 131.809 123.673 127.014 cv
123.725 126.779 123.373 126.679 123.311 126.914 cv
123.311 126.914 li
cp
f
165.547 114.357 mo
166.242 114.761 166.755 115.345 167.074 116.082 cv
167.202 116.38 167.657 116.123 167.515 115.824 cv
167.137 115.03 166.532 114.412 165.744 114.02 cv
165.521 113.909 165.327 114.229 165.547 114.357 cv
165.547 114.357 li
cp
f
166.004 113.454 mo
167.603 114.416 168.713 115.907 169.192 117.709 cv
169.262 117.971 169.664 117.861 169.598 117.597 cv
169.126 115.696 167.879 114.124 166.141 113.221 cv
165.987 113.141 165.854 113.364 166.004 113.454 cv
166.004 113.454 li
cp
f
176.401 157.413 mo
179.882 155.193 182.773 152.288 184.923 148.759 cv
185.077 148.506 184.681 148.277 184.527 148.528 cv
182.398 151.984 179.625 154.894 176.238 157.134 cv
176.065 157.248 176.224 157.526 176.401 157.413 cv
176.401 157.413 li
cp
f
178.084 153.984 mo
181.084 151.982 183.271 149.101 184.518 145.728 cv
184.638 145.401 184.113 145.258 183.996 145.584 cv
182.806 148.879 180.711 151.598 177.909 153.686 cv
177.735 153.816 177.895 154.11 178.084 153.984 cv
178.084 153.984 li
cp
f
114.048 245.24 mo
114.743 245.821 115.438 246.402 116.133 246.984 cv
116.31 247.132 116.567 246.876 116.388 246.729 cv
115.688 246.153 114.987 245.577 114.287 245.001 cv
114.121 244.864 113.88 245.1 114.048 245.24 cv
114.048 245.24 li
cp
f
114.972 245.218 mo
115.679 245.645 116.385 246.071 117.092 246.498 cv
117.328 246.641 117.546 246.267 117.308 246.128 cv
116.595 245.712 115.882 245.296 115.169 244.88 cv
114.951 244.753 114.757 245.088 114.972 245.218 cv
114.972 245.218 li
cp
f
190.989 227.351 mo
190.492 232.567 190.384 237.825 190.426 243.062 cv
190.428 243.367 190.905 243.367 190.899 243.062 cv
190.805 237.812 191.007 232.593 191.26 227.351 cv
191.269 227.175 191.006 227.18 190.989 227.351 cv
190.989 227.351 li
cp
f
192.216 225.226 mo
191.615 232.854 191.514 240.511 191.632 248.158 cv
191.639 248.574 192.288 248.574 192.279 248.158 cv
192.101 240.505 192.287 232.874 192.554 225.226 cv
192.562 225.007 192.233 225.012 192.216 225.226 cv
192.216 225.226 li
cp
f
178.79 219.759 mo
180.015 219.404 181.273 219.339 182.53 219.558 cv
182.854 219.615 182.987 219.113 182.666 219.065 cv
181.302 218.865 180.005 218.999 178.712 219.476 cv
178.538 219.541 178.605 219.812 178.79 219.759 cv
178.79 219.759 li
cp
f
180.48 219.058 mo
181.329 219.065 182.179 219.071 183.028 219.077 cv
183.313 219.079 183.314 218.632 183.028 218.634 cv
182.179 218.64 181.329 218.646 180.48 218.652 cv
180.219 218.654 180.218 219.056 180.48 219.058 cv
180.48 219.058 li
cp
f
109.32 277.88 mo
109.031 283.248 109.066 288.643 108.817 294.018 cv
108.803 294.329 109.275 294.324 109.298 294.018 cv
109.71 288.698 110.002 283.205 109.568 277.88 cv
109.555 277.722 109.329 277.719 109.32 277.88 cv
109.32 277.88 li
cp
f
110.769 277.461 mo
110.716 283.703 110.627 289.916 110.175 296.146 cv
110.154 296.445 110.624 296.446 110.642 296.146 cv
111.008 289.932 111.202 283.682 110.897 277.461 cv
110.893 277.379 110.77 277.378 110.769 277.461 cv
110.769 277.461 li
cp
f
5.26162 247.294 mo
4.15796 255.752 7.56578 263.914 14.1298 269.299 cv
14.4163 269.534 14.8284 269.123 14.5391 268.89 cv
7.93497 263.561 4.78718 255.702 5.56231 247.294 cv
5.58031 247.099 5.28605 247.107 5.26162 247.294 cv
5.26162 247.294 li
cp
f
8.02453 255.372 mo
8.57738 261.526 12.0948 266.959 17.6119 269.793 cv
17.908 269.945 18.1703 269.501 17.8737 269.346 cv
12.4856 266.526 8.88899 261.448 8.25004 255.372 cv
8.23508 255.23 8.01147 255.227 8.02453 255.372 cv
8.02453 255.372 li
cp
f
36.4691 297.159 mo
37.6715 297.321 38.8319 297.197 39.9664 296.761 cv
40.1857 296.677 40.0895 296.32 39.8685 296.406 cv
38.7848 296.827 37.6688 296.962 36.5161 296.812 cv
36.3206 296.786 36.2719 297.132 36.4691 297.159 cv
36.4691 297.159 li
cp
f
35.9966 295.628 mo
37.4841 296.157 39.1135 295.862 40.4484 295.069 cv
40.7686 294.878 40.4732 294.371 40.1563 294.569 cv
38.8938 295.355 37.5444 295.502 36.1005 295.251 cv
35.8537 295.208 35.7572 295.543 35.9966 295.628 cv
35.9966 295.628 li
cp
f
76.877 230.318 mo
79.9013 233.988 81.963 238.046 82.9541 242.709 cv
83.0153 242.997 83.4596 242.875 83.3962 242.587 cv
82.3734 237.936 80.2873 233.651 77.1003 230.095 cv
76.9629 229.942 76.7498 230.164 76.877 230.318 cv
76.877 230.318 li
cp
f
76.7115 227.444 mo
82.8566 235.954 86.3875 245.188 86.0872 255.794 cv
86.0736 256.273 86.8205 256.274 86.8313 255.794 cv
87.0648 245.494 83.8936 235.029 76.9181 227.285 cv
76.8198 227.175 76.6232 227.322 76.7115 227.444 cv
76.7115 227.444 li
cp
f
84.2678 173.99 mo
84.8406 173.578 85.4025 173.154 85.9629 172.726 cv
86.292 172.474 85.9379 172.003 85.6122 172.271 cv
85.067 172.72 84.5262 173.171 83.9945 173.636 cv
83.8043 173.802 84.0586 174.14 84.2678 173.99 cv
84.2678 173.99 li
cp
f
83.8187 173.016 mo
84.2633 172.611 84.6946 172.194 85.1273 171.776 cv
85.3888 171.524 84.981 171.116 84.7286 171.378 cv
84.3114 171.81 83.8937 172.242 83.4892 172.686 cv
83.2869 172.908 83.5964 173.218 83.8187 173.016 cv
83.8187 173.016 li
cp
f
87.3738 135.056 mo
87.0635 143.266 86.7296 151.476 86.4269 159.687 cv
86.4166 159.967 86.8538 159.967 86.8629 159.687 cv
87.1288 151.477 87.3635 143.266 87.6218 135.056 cv
87.6269 134.896 87.3798 134.896 87.3738 135.056 cv
87.3738 135.056 li
cp
f
88.1825 135.479 mo
88.213 143.702 87.8512 151.914 87.2129 160.111 cv
87.1867 160.448 87.7154 160.448 87.7391 160.111 cv
88.3172 151.904 88.5214 143.705 88.4682 135.479 cv
88.467 135.296 88.1818 135.295 88.1825 135.479 cv
88.1825 135.479 li
cp
f
4.53947 140.577 mo
4.26412 144.162 4.48472 147.746 5.29232 151.252 cv
5.3445 151.478 5.69015 151.382 5.64025 151.156 cv
4.86628 147.644 4.56858 144.164 4.83264 140.577 cv
4.8465 140.389 4.55384 140.39 4.53947 140.577 cv
4.53947 140.577 li
cp
f
5.74288 141.425 mo
5.73411 144.256 5.72534 147.087 5.71657 149.918 cv
5.71569 150.204 6.16096 150.204 6.16008 149.918 cv
6.15131 147.087 6.14254 144.256 6.13377 141.425 cv
6.13299 141.173 5.74366 141.173 5.74288 141.425 cv
5.74288 141.425 li
cp
f
6.62821 170.038 mo
7.04403 170.471 7.45985 170.905 7.87566 171.338 cv
8.11043 171.583 8.49262 171.201 8.24774 170.966 cv
7.81421 170.55 7.38067 170.135 6.94714 169.719 cv
6.73739 169.518 6.42694 169.828 6.62821 170.038 cv
6.62821 170.038 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 19.1.0%%For: (alex) ()%%Title: (1702.m10.i304.n010.P.c25.522083404 Doodle blank speech bubbles, hand drawn cartoon thinking shapes vector set.eps)%%CreationDate: 09.02.17 10:09%%Canvassize: 16383%AI9_DataStream%Gb"-6q*Gum[l=6@JG2;5'9ahfp"X9p;8d-))E%+o&6^A8Kd#,prckXF>JISGTg976_2*iPce]0J26D/&<Q4V&8u5\9(Wn*UQ2_U4%F,iQd#'Rk(gr,`I]2R2-0+*&7]sF%G,]20-d+(bbQKqJ!-g<[Ci^$/&^86tV9!2;(bDk=],o>.uX-I.j<aSD!rm$fCgY!8:-CacA%(5nGbM3VO.G;_=Lg2INXKjpFKe4SC`_G(q^ZOV9ERlZP&iV8@Dmr5$i/c/tO5s(iuWUoc=qFZ,qC?0kV54+%OKmKM[D%nJ]09<&E%C;Z<^pVU`Hg1dR@KVEs.kfZ@T4O,jC%9YC4mR83:NtO:ePJg32%<W`QdP?^[1%[^$Qh">id6D[Zs536frY%Jb#qKHU1:t/4/7H]q%Y*#q/qUX0p<M0)"YXr6k+=pNNfga'$;i[-M"4&>Eg.'LH<7%C3O!@7&_3Jjb?,JK4F0;g4[S;D0^e7i<K2dphm:]1_k2FWQphM&C%,0]2eRZKF-C[;l:7l7T0cRd+uf"GZMXM$&!)MCTs9nCZ&]93\_[,KTg9JO_$N^:qiPn"&Pg.Bp>?EFp2TZTU<2tU1TR\d.Qmh!^@%A:^:d=?`[rjW2WLb"=]'?/R)905tUY^a)<05,a5o#Ynr60rjN,0b7lQVY>mQ]>Tpq[DGM/]V$h%eu0#t`H)FMY1F$V2WK*q_O(9V%4@qd2D\2jt)^cU^)IZbNU<LO*m?dkjamFN1_-/k6=t,"2Fo#m-358-R;66;/GHK3h%1R5V"WIC;n5Y0g(Wr+dl4ng/+79o6o[S8i%d]@>NO"4-bWI3eU9^H4E[IR(\5+Es#C<cThih00u5"]p?csOmGpp/J41#.d$a_[[IBPc77NTmh\I<ecB=NqV>Kp,]KH<SD_>,K@7%XnC]2?"-B7cs#(nL&[,2GOXhp*##U/?9>o:/YJRdZ,=>]`nN3!W74AijV'^GhrtZ?KrnA7TU*ibAC9;:5""g'.@2N,0Dpc*S)?JI%hXB>Fp=7MVQ<;<HBQ&=M]!0N[YA>G-\lC_i%pj+R:d2?oDTgTL^FHWI+>"[IgE+0B`'"KBq/`$gej#d-jKobioCWk?jNf`NC_;Du%D2<'./fdrLKmK`CHEicAg1VX2%/58')e!IMCuhQ,*&1I0X_[$j@Bi^i$)@,3!nq+lS?6prI>`A$989-'+Zb@;pD;'[bT.MBj9$\$%RtX>aeif9r'jbH\s"mph)="0`IVV:5OR-!&,0eA<CoW^C?gYU6-i+IJ:<g73-5NK@hf!GH,/41$;mfg&GFu=_`6<_-@[UE_Ei4V#%^(q?kZVr>.^Hq@u^;GF=^Tm[hWPn^`KD'?6q<cLEZ,pA!*/=dDg(F-AjW$/Mls.i%\F4gVOFmq)X^,ssjotXOBae1Z]iQ(mM*8lP%6e\573,1@g3kE]Td0<&DLH0>Nj^r3Sf?!s0(.JEpI*0if@O)Cq+>cUAHC1[c5FP!Oh]i6%CY$nL<3GRH$D_MD_H#c:#Vnk>VN*Z,%#89L<+?['9:>t3R5`)A-]r9PZ5lAB20@n`tf&5/Q]_3l#=tX%rGB=rV@%9\SL-k^>1K'q%:W<:Sp<?J&^Fs'N]-iZ7Q6jRjA0A6,%*$>Si_=m4T>RSRkdfWH13bpEI$S]NEru9Y:ru:(FPqg56:W(&kl0.be1u2Mni`@;\k\$YD%tpNkF>-ZRC6#-]#6H0Fb'CpfJ^lL<%k^Z<C*2\VDe*NbHC^]g/1BmRT)K_S1_o1O[@#E$I>g&;R?[Pj&e8KTQADa8GBs>rX,,RrM1l7SH&^qh>IhFJ1,,RrM1l7SH&_$MD%9S5L]Il_%BcSk+^6FOO)CgN/4(9`@)F`Vtk_+[mJjO<)6!nW'ackVU;3]_5?qD6#Rj,<@G+4nERJbSoK.6fl&,X52AA;I@Kc7d;#%e1hhul,Qg,<L@&Fd,O(6\:75?G:SAfA*_Q,jf!tk8+**[gsfG9c5C6c@iB7/R7!\IIj<_Hs/mZ&%em#4Y$'!"R)umDn/D)7W#))L%E@Ljie,H>J\7bHG34_MfSo'.ChI$=?l;oLtH6ZW8SRt#LnL+LlU#B2PY?EB1<rc<KimGS"\2pYHX;tqpiI3C@9"+&QFQ/Ol3G>>D%O)`1e,IrMBrF(O:[Tmpb%)F3mh^>Tl&aERGe:YGt1M^O"a&F9G\er*QIaJ&0f%"-aHG9U(+)Kd4]5HugkVVJU8/:;>3L:fD%Zd^u%bLR#[do+g8JdaTTPSFQ8^7TM"CtW1%Dqe^f,fE=,@c&f#c5aC1O,&4)^%`[Q1B&p"Y7B$VK&X5(aNU&2[n(,0]oQma>1pBZ9P,+i%`k4tl[;i\hrX=_^VqHIZf;&ItJ247VWi((njDm:iA.4eEI+bupbnlhD.q"73]<6h=R"d]u!aZGL*HAr(10dt4nFo3CRqh8-qU#t1%oJ`.MU5#gW%:/#mR(imC/QG0i=ACi"KBii!\]HY)Rce@'UbMf-3aU4Z?^00a:#`q/6K9Q4K8YS(cn4ItId#i.oX3S.4rPVK(ji#4%(ku701t%)([@#3mGY!$?>J1fqYr=Z&]m?,!Qc%g3=QB]U8!a3?2t70[Y_*H0XpV9%'9<X)IRQ:PjYbaQeWCZHhI,q=N1q6J@Z7(u%]JKPa@PA5"e5XMAoi^R&\HBoM@D6j2dPiGYB`ENIinR&SnSo\Ar+U90@5QftQ'AQ(Z\&ofj0,H%lQ(Ol/Iosi$`3hoorCiHK]2q8%VaQOQ`T"t;+d7nkm'%IA#8ah2X-UY!RZ%Z8p4T1L_TRS2Oj3!VV<.pd0pdYA533&%8j<t#99OrU,?2$r[LlOX%t8.87[IdMYB]*&%,#.7%Ikr+sW/T#)WJkl`g#B4%n%m4:G,pb-NRSH\I%u=i(35:B0Q6(E"oO%pkh)mmiSV9_EEoQ/7V>8:Z4RG^@#iB:nl_RmO7o$o%o0D+(5>j=spG]83pCJ.nDq*N0K<;ra#8;_u\Gfmqes/PrP;7r0:d;Kp:^/WW%(B2B-Y3j=ObLeTKSOe&jp'@%9R]7m-58f-DF#Ga%&2;m;ZS<n^QkVkl%]mLlq3VsbgggLON1q6J6AXDK."iE=L0JCB-A<"4:^Eb4D^!%QOtsIlp(e?/$j"6tePt.L$8DtSa-H=9fdT>W%(7[]"!Q4S'niu^%dP/$F[:kVV<kVhP%s&@B_>EHdILRq;r;EpTahqR(hFbQ!%uWH#[m#(=lmgm-;`F_^Z.o9LH`NE(EFlXpmE(9#%fCqPX&BWC@J"Gki4:jXc:DNgq%LB&41h6H&]Q3HS"k?0lGG:`W$L6ML:kM2EU7`hSe3lTV[7]>(ejM`.JUUc)_C,?3=KA?Vs"mSK%s0R*@GYd@*ehFV6iNJIMr*,m-Vu#@sQ1R`qUmk]I6pe%Z63^BH+-r#SHk3.kQ7@;)RCFF/!>WcQn@2<_s')f!U9\O$D59\sW'bC@%d6Ua8if0^acqIb*\cA&<$V.lR&?E%e[n-J;5&W9',O#/&S#^cYBF'a2Jld+b[f(k_1l[0/keBT=r`u>GoY6=V7H40HK3[V5r]?_M%Xn\m)0aUWF<YIU>Y7?VAFoP97>^q2%Q&,*JV,XSHqtniD>Z6)'^KQ%k\b<;A(>K_DIjro3ZE#,\1[d/=dLXmc6GX^jL[D2#;<[+=%O/YScp'ol)5Nr)Slfp-A]jLd8&%6A:eFt#sp!KbbZdCt:E#Gc6k/M4>pNgXM=gh@ES<h%3&-hsMRC$aW*q7T9m2rm/G<,4f0'_9\%UG0_Z3.l);TWILPhFuWBmHYq)rR056iP2V,>Km(1*3U__-RY4D'?dXEZ(1_=bN-T>K/#BkS=E^T-.(_ko#a`Zg#9l;V.hIjkBp$"%.4;$X"+ci0;GKt9a8?[X8Q[_S9.")h,V80d`lQ&\,$niTNQpSS"S3lsRD^G%,<!*(h^fbtp4%k:@cc5$8M(@oMr_O(Me$l9-^DZC%Kh=(9/Cq]9@\oABpH;:HB7cFkJHV\%fXg]JE[/3j4?.3eMtG%\^&?TB,Es'q0IYWS'hZ^_5'PVImlJbSdY6`AAj+qt#&6hiIIa\e%eOl5iI<6s>HeuM?O<Pk)r^_NSV.7eJlf*I,%HZ_W*iSL@8!s;pS>^,PNl`L_/X8@ErS&Lp\7U`-0])_$bHQLjOtDl.b9Yar8[_<U%/X'_g,hXqE[Tm=J7Aj03fqL8US9()D>:PhIbO&!3N7?^CRBqAhXM8*OF6%8hXuBK?QtP]1T-I,JSY(.k#%VDWf)D_5bBX81[3m#l%Q1)cg2`P_4%'_.9UVE'RMV*,nC\O99m9YMYA'7TUj<EW$\W]5imP,=A+YJP2l]qAk/r*6*j=cPi9)]B++4i%=\)\:rTb!m;f8SOo%qtS,s@lIWU)nSg\g##@Fgg"&AH!Y+R]Zeo>S?Xq]QO>;kVX,t*ZH9F.4m^qr4tAEOBdQWur/Ej7Ss1*!0`TF^1B!0aj@PcmaYiH_%!ATt`-J,VC=BN7XHs@2cV_2QM03dNkpT'5hi>kjVNcTs-H9Y@"#@%5sY;?.0C7kp?/$sOQbR^UGa%([[O]^TRB_6M$MLU9hf6eo"%M<fKSnbV7VgE$^hT4[\[?^%BF-ZRM`HQe#k[<N;h:#_gSdI5uJ3,",M:ZA$=*->K;DA!26LN8s(6'F:,1+%"fS8tJ31;W2@m7>Lh%:jX:T_&]Mg<L,@an#,-@Db47<5W%:&Ts0<&i`@9f_@)0G[`P6,,r5S2k<sF_kfVu6Q,2n`jO'6Bkg>ZjCd$"l_B7%,SEo@>gt3E9%N9&pki#@rD_1ART=L:)6DWUoB=BG"IMNJm+"8fT/.?2Wan789ri-LuQq>8"o6*kaa/<X2K*_5;$QH_:m`E/>A&D*Rce>UlYhSQ36%a^%7cmpCIKUYIEf&>ai9YQQgIjknTN_jL$[GUT\8eku9Aqi*oef.Y.'++p9A6(p8).Wrrq6?*k_095umU-l_8rD/5UM:K,mgO[9#%I9]e>jRnBp"sJFcl6"0Ahtm7Z,<O,7]:4sH]T$6DA'jd*`((nS5B2>2>[udVh>fbVU2ts%7;eg.3"uNCro1k']I!R:&1?UM>&Q.6%cH!?H_RL?2(;iBlWOB=fBW3!Y*;4^[BbE4]6d0Y!:,W=6^:cg0dpQQ16.7)mRKQ?KTP5#q9nK66cnl&t-:(R;;8%NHe)7%t592S?%abBC,s0DCW0Oo-7I;"E6n(p@ESJ=5MLW?Q2l]V_N=.qk!l,*C4@JX%?:o7?o>Rn'%AR_pMr5RO/;)+P%>>.RdV4,XD)S[)CaU6T<%^IS)]EAH8S92UK@.HRfNOl=*cV%Rgn7CC%,rY?B18`oKaItHT:RdiGrG@/$,Rd.(jYK?6NO7;Os_-*e-o"3Z:G"(PNGb9K+m<X8+%HZ5o5],^XMDP*DBKT\$b\JX_;3-WS,3adE-%eE`?NVfjFa\Qc7OW-FL01q8<QSnD2@no.fM21b"HWXc),$2YXqt_*5a5"RiIL'rS%0%TiT7p3V]1gFhr<@d2#$K,Yp4E7hWmafX&[k@9qViuGW/(Dh1q[(t2jebW&l5tXt(!5cuE0#ip&+R9mrU*!X*qc<,2>A>DQ[J@>%n;F(@2>A?'5-DX)InT&KLJH`cY8OsS56jEXA_1Y>L+innC<M@YWY8SpEa(F)_i1WJ)d;9\XVn`U=?/*I'2s)AVaQ^ji>N4cj*Ks/%IB*&1*tF;*pU;I[Pk<Vq=?fW&.t6RQ2SHpjH(4@o4L6e>!KEj!F[\<A@\pN(V-]M#c8R4FPV-/9L1k"\0_@TC5.+Pu!m.'(-Tf^t%f-3+_CMhX:B`3MaJU^/[a5k'h)t(AoZKD_;j205h#fnke*&'>(M]CK<"6OLjdfJ'i^)7Y"4(EC,E'-PaH;D80G<'OS99&J@^hp("%!aC:(#Er4VYMYna'J[U.d+&[l,']kFg,N6<nX'!ipXh%G/Ec`07:I1gUEOI5=JpVl`8K]6KDB\t\Xea@a$g/aPL_+OoS4e!?G]6,%GU^p2.hc7c6XEYL5V68ITSNDd#ISBYIXFk.C>XVn%u>U/pra@ds*U^AHF!jCU;Y^Tdq,TW-b4lEO?4#Jgb9??8*\_Z8Y:L<RVc$6%k*8laig<?S<FG_#IW/gmh;"VB)/AX#qP,:\Xn^;+@A'"ckf=<C?/:R%]W5$&-ai:PT$fLoilH4V6Q(Ypja?B\8'p=ijmZ9H]M!V1%k=as5GpPR%PiH+E]rL'2?bY2F2X.t<9Mg=(?TAH,/%'!f1pNT'B2?BJ@],M>7=4QK$2JU!>:^Ob`'r6?%k<k(4T2aW472S24:ch(%R%'PT@!%G_bkXbcUjtaMG5s@,AG"Oi!SqNqO///g:+4$<J+8RKs'E(m5MA@eXR[^&ao<I;LAkh]L^W:5<3<EdGL>_To.S:P?Y04h%pjM9<nSFLrKJ+StY=Ko]&c78[[2;A=N5X"@]B0\)]['KnhNX.E"4&j<"F]bZ;a+<tj#QbJZNA/Rk_$0'dm8mIQ/cnCl.A;]I;5cf%_ta3irNSp9^/NK66:bQIn`bsoaA_^-]d[8E5;gd=/kEigOqn$@D<M1uBK'-()i]q&g-$Vs4NB,jK+PQ,`?,N;,]6-WL2q.E_3n)G%1qMPBn`^W/$[[C'^T$YpWSQ?TABhdIkE>VPru97h-m6Xoc?QL[eYe'JqY(*jqsl1U&NB0]['1)BHPm=H,&#tPE=U+GiD3R<PTkUb%s1<AP.:SbG0;^6])uE=3pR88GR\d7D87rmpWTh=rk\oH]r"W;soQT'Vcl\D/\bc"`VJZ2!,-Q=hE.C6D5+MG:XVHp$*Fu+pUS=sZ%_H4(q!m<nn$Y9E4mY:mmO5[(mGK1N1(:9b?jn^,D\@srDZ_5$GY:oen/K*9KrXhGN!&)s*2_(Yt!PAd/3r\EjN`Ri"qZElPYFads%Q1D`O$[!t#EbF>RBD/XLLaKeB<]_dMn1jE1JrkU5nVVl7.=CZBa+iVlTTZoV*ABB`[pCWHDM?>H5U>mC)1lYea#PNOP.p&SM>=h=%>O9,r5rlR#o&9$fd<p"YOL/<N)[+EY/Dd5"l:R_S$nnT36*Lc_e[m@tmG-R>Ts>,_@Oc:=`sn6q].@'dCu<=-,0d>iWE]GK;5HR]%hc>!WfVoT\#+k$`(:*P\?\s[?lPahcGATKAWKjd@mO]?0(`%&hVFmZ87kK\iM6DGPNBsWbQB&i[`p2i,X`@Y`q"XDkTfY41'nGNB%@`(0]5FU87TeU:,f:)@nW)g';e!@k/IaRIWiTcs03e49^.OVX.?8)3r2*6!*HkjKN]aXqu&H71DWp!Nq>3ZR(Kp?DJ:b)B]j=tdn%hWkV2)qiq:fV!a.q9s,'nr3[mYB./lkn-kUr:F&6<Wa@r35dL-J*9m;$u:7MlX`@6$[ar)a,G7kgTM_!\o+e3>Rg)\-DYCZN"2\g%Oj.MXrGI9p"mZ<ka"?2llSGLPdj$bhYJHMD"UNXp?<\OVK9E8LCL*N+.9f#p_YcqjkGs;IQO0cq.ug]ojAWKGQ.ed)RZ0pK03`@J%26qX9SPpJ"-)-AHcH;F-=f'eBSCB%5l@iLOoh$sn#ST_IOH[fL3X:LV[Mm^0og5W\Cu+GnEu]L:CQ5)][['_Mg<PEjqn@VJrbAlr%B<>iCKfmTqJ`)p(l1^`!@FEGi_fd>e0&j$bI;=uBi&Zn[o^Abg)]73b[Xj!X>8q6#Rj_Ofr[_$;[DVCu=h'X>SOMU<]fNj+LE$%u%Qk#&-hu2`4L^Q@Iq+rP)B3T8bH:t0<8hNSO.tXV(l`4X^D-3i;[sFqgdW8$N'?'9M:T4!(;PBW<.2Oj81NV7C[r]TCi^Z.UY1M<E%*Zl2?VTq3:RDUY9WE-eVn$G_S<ln^QagJEZ1$TN+2fW)UgKc.gad*m""Gq-,I_MEdlUR+A/<n%?]hti#KgU$$K`<nj[1Bbu,Q3.]%f+O>q[_eYFZ&:LZaunH,Pp7r;<V"tVO-O/kk#XOooX:lBgPFM7cb)oP((8[25p_ZASDD4hGQ"XKcgsi\((Et1ia@*`!V/NbQ1Ki7%ck7RGc`S4`lq*Ssbsi"(20e-!IO!T,:V0YW&f*WIWZE*!;oZMJDL5a.TV6/WNH22S,a[Zlp23Z2\$ra%4?BVZ;01<P-C*lbF'G4b%?tA&2d>N0CR!@05@Wq.)bEu,]So#a]ZalYhM>)9oNWep):@Ca;/&1@T=H<&&*#71AQ;035S(1sk#<S4pcWg[VKVsp^>&T3j]46G@%SCkaa\*fn8%`fqfHoCI@jQrLtZi>!7V8rCu*+s$a"IC++\lHZ[_mH6ZDFcpqh_P%dK7!>9S(Y=h;4.-hmfraIa<*+YqkI$V+,t;e%ic)[U]/P]SN/BU[;M-efRDu'mWEqnPBTUUZ(CV53S"KP$n*8##FSAP\h9.'34eRU4p\29/n+hG0eSL9D,4^^3UmR%Q:u=9`Q19%+%bNgp<(i^,5aS"qKOFDs`YnsYY^PaGjqd1jR)o#Il@W<7?XB2h;5Jp#p(OLK<>qh)jUG8T'N@s!&=/!W^a<@MOU-^#%V;-mjYh6:+%f6=?[`s]E[^\q;N^^Y%``AuE)OeUJ=M_D@FR[c8Vei(s!r`5*Hh%M>:"?4Bu`]G0U(WEE.hQ%c5-KDSUcVb^MB!E2(Ucint<kHJ&%bOZt!(I&kd+@<50TQ[gMG$4^Gd>E]4k_irmGh8?Z05,H:0;KGkWN1>T/dR0)E?$p<OnVJNaDNT2LQ.Zk_U5^`e&fql%dU$p@$p%%%[Z'?1ZZF2_ZVdQ\Geft12kAj_<jmD(A8eePNFJhPIbp$GZn+.4[c*[8&Z82^XJA%?$4PYt>i0V^I:D^lFn,U[E\5aAAk/b&/.qk6%X`i4>C-#1lT""IFIf2<uH=s-SJK)*ks4)JV]MU&\BES%EIN(.]_mF7EeT[d>V3Iaep"?;:lIDr"pM/"\SCHup]=h;&T!OpO^GXd8%9uBjFiR#"7gQ=,e\#,C*.RV#<ZaJ:h.bM")];t2P+;NhLYBO(*^27:5qR\n`>cooNTBbYOqe\hQ(/(nL`BpQLD\">JfQU*_h0Q>H%PV)<WeRl)Cim=A9DAYE<D@[A&,0L<e_[l[[9h35KE=bb9QN^.gT'8:RIp'9<*HtTZ9b%_Y$b<UJer*F&EUek;[JX'7A0XtgX4d'i%Cq]5,W/f@HX1$a.0QB>iHt"[7BOn^VS"=VL2&]Nk):kgdfrnaF+G]GK=$c6JIu.?RdSA1<,F/Uk&#lgOSGPl=SYBZS]duA]/a+?7%j=7QbQp4C$`;HZ.UZ6,):EYrRm7er8A_rZ#Ma>S*G*jp>9Do<RR7M1"A/mWD0Z]M'o9)H&V3TJfUP\0ooYmiMcX$j*]"@CoSBHAr%"AMCiK2uU(F(,FlF:mOhs&K]D&kB1klFPG5k/#&ZD0LJS,baf0/BNkLd:Ad53tP2Yh:d\Mi(3)h*3/Xa?+:fgS8Gp`\+BXkh^_4=%.^&E+Q1%o?>W8aL/Tt^U\pMuR$IpBTp=[F@C*DuY*`d%OR*+[H1KQ"@>D]E[5X_%&9)oS6M>P)iWZ\R9Q(s?0E@'"U0F-OFj2tT0%>lp+LB5"VaY:\<E`FN;PigkheEe<,\Fgq(tcNRUTq,/L\(<]'`Tpd&[Vd0.5FmMQ<C:0qNoj8D]oV1%c#b7\.)5?PjZ"ced<lq"Q%a4&>dYBMA>'deiLkD&9SW)SOT=ut9hlX'p[oTiZNXo4'N87giq8&#`%)?h+g5-0Isjg`St^I#(2C&L+&7$pYJd>s4sR&m@C3N@-R%4t=0H%HPEQiM7Gd&ssJ,pQ7'n^M$+)(b<eAY[=hf<+qN%kK]1#4*ON[4Kue.Z4oNJkh.1^.2/["3$#[4"S?Lj(e8t#Z[^k95$=j"%a@ki]Aa/W-9XaDs;YshE0CRSPI@9k84W&]N4\8u$EOsKBQq?Z#Mk;;Rjr2n@kJ].+F4FafGCNmDI<+HG7@[#!)W\fUNfX(Q7oUsM%X+Tr8qd$H#l:L4k)=f637G8NjlGsiK`3.lgP]Bt60'Gpoh'b*`dZQGXSsg'n8WCX>ku9UT[s<W,@mHYkX\p1d"[5V2m.GmH[FhVH%6&Qp63m-%=(Jq4C!NEV\k+e\m,6lSh^+g#Tp?c/.f$<QOgDHZ+CE#Y5NGYGWbT)rgaaEVfod5*e[H#E?]OuGtHLiPJ5-#KZl3(ed%N45]L;,85Ji2p9Mk^'NSSn&eBHItEP&A)r<m"J\sIUl<u(XH)\3R/A3bOBZIX.O"G2\%LV&it^U"L;Um>72$+BC"pGp!W.*<KeH>%DnC+hX&lFSSNh5moK;C+fr(INGjWuY?M&(.PELKTH]euQE(Q9CA36O$4rl0(g]^l844GpV3-WG&qthqoU#)k+Hi:g.%Zs!d8.]l;%EO"Ce@8VHWg#-2Wc#W4R<g#X-hN$6fpTD#A(0SM*]`s/p\PgXgRX(+P:F=qP7hhUp@$j`;T%SV&ZhsPqihtH_oI>t>(N]7qd=M-:%MCOiD?pUAS1/b[2mu&0gG/m58FARcDY%8,H).XTD_86`j4PmcL`pB)*=V&uH*%(`57`_QB?n=d-T+bdcL>*Ec'ro5,.[I'3MT,N*%;/eH9VD](bQ<cZtO4#:MT9FL;7b(=McKqXnkV`6D8*hlJkru9'05%m26[+S*J(u>EW9<`a+C7Ege3IK@b*h_NBrlckB/cC/=XZ7'%($X;?fSe&eX$9`97*1/4rp%LXn"di@cp1slcZ^FXHF!22l,1L,qq4^0_9UiYEc&L3\o:Q]Z^J?[47dF!OA4<p]5M#W\b?l*hlK&s%[\#3hI=A]>>\iK7baQ*0:Fk26B,L=6p[lS/EIW9(C\%#ddVQ>*>^pJ5:JEJqDV_9\SMhE;-SJeE/MGf9rbCEVZWoPZI!B[LWNH('%>0fiSVAHn+l](Q20.Zb:\_0r]Z;i852,9c+F71tBC&@nAQ1)\In"uu2a2[7=ccPU%_6Nb.or$-8K@T&;renen/UU]-3m2nR?Do5E%:XZSuc-4CXrci1HOd5`c\C4+nIsL4Z'UOaH(QMQl)lomn8(E0ND\(8V[In$Tl1r5@1(S64^A@N`CP=r8plXFSDqnK`o=s0YmEaT=%b9#MQo?F9!i;:`^gfi!K4gTHL+"f1BVQC)!<aO%"Ha:<\n4dLPCd*=AG4XST@P4!1_l(A8[H"Af=]lX6=g(l9s)"J!FYgd1S::HV%Y4gpt1UXXji!8uUBR+Uhe=)hL(Z0[E:6fl292D-s0@"p@cVFq?2d\eX;RP;7H?-He=u5<hS+X7D2Xb)<]sE[q6=G"#9Cu6=:M8g%%_j-t*>7q3*CeZRdDCjUj[l,0bFe[(!-hlIRDmf0/ajSrAVZl\UhA;dW=a?G9HKIE*#EjIThmor6^sfWTZUaGRB$Ig\/OOrs\"0,:%/j7;2H1J4p<EsqAQ"T&.;q&b6h$oi<5C&Ptd[ui^XhBteX0ZU!A2<b/\O!=ohK\VXg"NNqIX^iech$ShdUN4QX054=eqRnQSJ=Yu%6Ch.8>9!@chLM&?\qa%Sc#(asQ1Q5p3ZZeDg[7T+HS0H&rr+0k4TFum=uQ9Irec'pk4R/\o\m.+_.g'7g:a-5:*#];;*X/jq/DD7%j?Kf\s7X+Y6BQ5(#Fg0*CJX(/PI22=_*1iHa89Xt`[=KMIIuUR]u>1^+j<&+]lp?G]Nqf"De>;N[F7)._Y1V)9Hi:Be6F3Sj4Pe1%Q/HF:.Q[Zlj#t8C&/J2=9eS\Ug769\Me^5`F;F()lUF2&H0-/JQ5:&MG>ea9NTPLcG#:#LpPA>-CNn-K5^MceZB4@k;faSt1G]QA%O&f'4]oQr!`mWmh=KB[biU516ej]c_/S&\"V[bX#F5,-u[gXPTAMUshh91]B$UOai+/P='SZaQuRFU=lhbYtensS$UklWH^*]-u+%.Cr=4[HD]P>>IJd]K!FqZtg1Ne$P$P-bXse*R[ihQ_7b<j*9Ngjns#.qrR%jCh(/)pF$<=/D@;=0XA2Sp3O,C0=]ApF.[X#8,"oJ%[%UY3(ESf3P4p#K]saOqh>Fc#/UHuUoU&)):2`:%D]In4WVpb)l1r3FR>agYr:#E03nUU*/AF@#aCa$$fC,W7Q_#%0T3LNXY0C!R%R@+<J_L&#&1K_hkrHJl*^]IEXMIM&(l/<DWa/9GHHc>:1Ge_k`(Sq$Og>:]Nj(.H:L]-enFA.BYh]FHmGRnsu[sf<q%[6GX62ES6%n8!dgfZRe8+5Jqg0M(Am6P:j2W9[Y^I=-Oq@;02G+-R:BYH5tijIQu"?b[i%IXhC>Z_stFhkp*[QclF`_Ws<L]7V^@l'F&1b[m*k%S4EK/?o`L;QL5"4bL7u\9d9sJI;6s'k<CU^[[5m+L?Eq8^G0'?Ph,%_q%_qdb,==Lk(fi8I<tpPg9Sol2Kc;lg9Nk2pWVoR05"$\%UOh=ee"^<;a$c\t"h7;+1K2Op^ZTt9l$HUFTJKVGe[>2Gcm_-hY>Ru::D)?/CW,@<5-9#R>JfN9(1)^(_I2qnq")nU^9m.H(b/hq%UUsC![sWYPXX1sr<oFp/5!=sdhJDO0;5ZA!ks(e<EE#QnYKILnQX7^/+Sbm0n5V<gf2N-D%ROGdg.N!OM[U"eM\,$Aoa"^-;;M3"%ZNs>Ik`C8\5D<I3F0K]**Z11Y/N[AYL*R1YI#=TFho>\l<VeGi+L_&iB.FHlRoRc*/6;"n/AX8T,!nd.Ap!Ht<9B/WbgfD*aZ[G(%0m^Oa'V2jmO(E8p4mQ2ao?j:+QPMVmPtn=dmP(F&OYG0U<&EGd$j$uQ;LsNNaPU>+e\gnbU\t'Hk%"NgO(f3?4\!BZAG)#9OEm:k%1:@1drQ*fO4u#;&6Qd\CIT`Ya-3aD)dWR97PuE%M-SNTDHs,hl(o`.s0?]bpV9Ys8f;I42aXqLEgmE$.Hp,0-3G]Zt?=#I3mlXa"%qu0#pb3&-4gkhD"clFFOqb9e+?m+kFRG]HtcqFTWYe44\+-PsakYpAPb$4eRPt>+kpGY)BkQL)U#7+8WIV%!tf&gS*mI\Tb5OA.p%.u.PJYIsl^[GTUbXZb@+TBZ9^QrsorX&2]upS]*[aT<ER%Xt3s<`aJ'_eAM=e:AHo5iIE>65jo']Z&Zq]p/8:F"b40Hi1"t"=`NQ%Q]9M<GH]+aeiS47IC<J>$#A8fgN$B:Ck#3g@Ya$`Z,=PC"2'O?G/.X[pZ>-D14B)3^->uWrBr3Ip1%,#D9KThl/H*LD^[G"*=mnY%*"(%<_LA-2aeZ\d4'X@bGNTd'9@G9Lh`b(oP@rc8D_GJ6k2tCsO`k7/MdP1:&LZndDGt*)5&THaSu#6F*^,hn?<baiOe]AVE:rkF%LXl4;Z_n2"<h4L#LdfUFm?<r]+A<\#:4q@=N.+s[\qf@_QLMP!cIbV_"VhQ>$(n[1@/!*P,)`o0hs(*[2B&*>038IQr0,@6_e28]%rI];fiV8jUR-XHhpU%-m4SmhJU^3$`7E^.,SN_MoADINP126>WISD)L,?6T_ZPnYZqRZ=WXIiaCRBKs=hoi*dS);HST]BnR0?r@G%s5\O;Xj*-_]?:?#LXI[ni&<koVd@-lJ"'"ob"#gGRD&1,nBRIm]>iFFUM;k[m`mh[+4#`qX/DTY/3J3dIWu]Les@XZ0_obND#4OL%p:J@^R9`(Tjm1'Wq=IGZMcM%;=NHhd"u3*'"`/[)B0.O$l`p/^=,%I=CIb+'9tl)Ir,)-t[(q7%]_M'8>m_ZLmrZjgPM0BiIj_fi%XdR@NmK?2cVSLZKVAY!INqj(2A'[s:9dXoMRZo;(nhj'=*7WRMX6OADn]es^/4jG7`Oh&Kc/%ifK/_Ho[(o#UaF%=&BK%U,>2$MK%JMB#&'Jl$7IN5+d4V&b$NDDI.oNLdDil1J(Qu;1TqT'0@#>/oN,EUaqioJ=Yh;Vljm<ga_4T"X0nbF&XM"5')DT/DqAaAiMnO[hJ%k&**+ah@W-o"qHrB.Xd>i82_C=*88>QuB/(UJaY/^L(6+nG+c.57PAV"$Z$sF6i(g>(aP9lG1W5/#AeLAApSLO&u%t:=K&1W8=SY%4aHB8a"18\n%_Q`rHgd,jb7nC$B)qXN_YlVhIkhHM8kk64ZJn!ArF>Zqn[]sF2r++mV0mASDM=!rB;j2_s5M_]+aVG/c-UCbk0)2%mCVcI]skt_"#=uEn#m`MjY,lYKCn]`o\++m]:!]*;kMW]]>[9GmZPjhSkPc=64N@/p%_[-;[6OM&AqoDr8s>XQ>:P-1UXhRs(.nn%eNYC<^O&XrM7GQSNh4N0a)!mc#NbQHbi.RGI.sAtZQCJ;o#[Ha+4#":q[:cNRIZE=-V=!jmAt1M&sGP'E<!s`Au62'lM=*nD/G[-%.9cE[>CJH=;Ci^+`%PaFh.I*W+-m_DJN==1mK^=":X=MrH/,kBG?N#MO+*Vfno6:!"<S^t<^ZU4FcanKQ(icS2pBqsL#n#Zf0q#g%9Z*C\,!MWDRX>'kKI4C'g,iF9ELo,WeQ3,S\*M3FRH^gMgjQrOqJ,]jo9OUaCA[!B'loqp)nEZ<(&OQT3(NbIp[4.50OAC(2P4mk%00X"eg'Q=u9G4,6F;J<@:E??/mX;@RKkbXngnDUFp/LDO@C"pt!iGk%o]Z;H+h2l5m:cK/[F=`5SbWL$mdFcumlf;Npmuk>qte!g%iuI-*I',EZN`I4I9MI0V5I!DK%LsQ8l!Th?)m*h`FI#P*`Khq2kg.S')!&ZLb\HDN\VSEJmn&S:B+LM5c;8['S>FdH;I6SO'%l)B%8d+44dC0Jl5o-0BUUfs^6-DE<C/L5fr+pZC=nNfgb$s%KcsqrPjm6DcF2e,tpW\VoTC%D$6)rbRN`ftWT<ZPl`[_B\egb[MF-eD]%L7?8,'"EsEO$\M\6$nImjkk?KH1YOSOa?ghj^X34IJG@bcBj.9pmD<QCkf=pcIkcns,%GlHolI[P1ht1&;C#B<TST(37odZNuf+7%K<9("V+dmk^<>cf/q+u/j!\j)ea!(qoZNRooAZd<YP738C[--kZ]NnQ)\M_u$u,]nH1u#"ok_U<Xubg,CiT<Ar[I8!,2@S!K.]lq%?Z+Y)-#M<a5YJH.h%,obUN&g]0-=cn4J#Oe_S3jR^a.%,^6'6rpLDZUO(TM*E9SBf?_as.jlt(>2iWL0bfiO*'qB`%FYAs8h;6IO%=)Chfn%t9"CZV>IQ::0FdAOF*`FjEEDu\[/MZ/%/]JPt&e8l@HHE`E?nRq-oAt>9nHY4dSB'%:k9`=/_'T)*EQ;O:Qa:oc5SbpcX%Q2Rg"o?m(ocRIA]bre>TQ`8-lcJs01FHN@SgIDk5KoFn]^45-@!78k^BD:"BY>;?OnVLVuR^(.tXiqTUrpkJ\7JMfSI^6SuSPJUC%0#b?oR6+Wp4FT-QOrIq-;^enUjMT!V0Z^rX7r[nYRlI56'Z>&KZT*<@*Pe<-Z+/Jik)V;S0@th9OdT9XJ%g[kMQ-QLlENa8VL/&J%V0(>h*qPV^?W;MC;VAK3]ZN<O.I/S"hUtWj2rC"c%>n(WDj1TO10Z7Tg0rCRI+t5&qKi3($VPi"Z0hJ?^#%h1HjW*:bidQ;.PKog%oK.<em`Sf-gW&'7dZXnj"!-o6bklYal9/"U&3IAiROfe0k9,IE3Be]4^3KR.>jdSQO[WmTq7ZLkIHEi%)Qq`;'oI)]dZ2<-gncjf%P6Oaa'j&,!hd&uqjBjjoRkli<*.r.M\P]Ao/[9)uep+E=-X(f%8`'5fkB3hl#HQ\5g:]WDDDq1anKD&V>Y2obnRf+9Cj]DnlB2A]%$TTWGK8!B6O.)JT?d04.b\A/qIuL_^dr6V1rZUHVLM>f8',cT"1[3p)eU)2oA`ILeYaCsL=JbM0p4TAAJ*\b7IBnq*TI8Q;Yo]/^%EX;#Jb's,i&u^"-k>VA+]n*HiEp,Een!E@$hVV&Bh#-^f*A2cRgEmd7r82<GdDo6b+.q`PKqk1D_iDahJ:ag<0/A<B06<QCLZ(P^%@@YMm+rVd8%!K`L0@-3c[,10GqFCSDo@hSXl<X8)Gu3_Q?7j,2l)^29(-SKcZGs8=RcYj9e^I;e5;K4ojm'^+]ijSn%D(s<($qc<%X4aiOj2-2h>I)hs[?&?ICT[4SGM+@#hp9(rAQ/S5nh+r+l`@N3A%NhrK5WF*1[/M/O!S.sa74+$SLLJFaaP9n=ufelRaVa=f8M)Q%i:`WFq0(_OBL=rIlan[mUWbjbZ2?rb,c30dpBUFLQ8S*eV"Q9BhqVj/*hC8;B&IpqiR6<2m$AHEpKb,T:<kW#aS('8&B:=?GeBG.%H6;R;Zorc@ro(*XNHJc)I/76b73%jGHqF`n/p#@@]mfLA>bC2TU0mn%i@RLO;=jHS"8oOe^=gcWPGGp\btP/UMORuAc)*Gg*#il'%UiTPHDgrb)fHb")\%IEt\QbV]a"e/hSs7^EPqPomFjr3sX]>=WO6lAPH8A_&RX4f"Ol*$"8cTp8jdLD.qE$@3K><r3>g+25^0TrS%V)?T8>,BDYGL#esp#It$&?"B6a-KpC<8I4Hj[X_?eK$a9080r2iht=D"gG5!ICn<i^E\\d:&aU)k2H/Yk!c6a(/]VSmX?q)q;e+\%?b+h!^QpsMc(g0SSbZO"QL6p:i=FnN/TkU8^Ndq[?g!lWK2qB%U<Ykif^j1;<$`8kg7+:/XI7Sto&>up.pdM]5c)5cHnd),h_-V.%8!B(LfZfWX'p]-`%Tda(o3d!Ig+GlfhK][FFkt<ZM0grNiM3r,B5V;[[%,J!%o2!3BWj(.6[2&%(@HQr8Fl?4EUH?N\3F&,oBtC:%IB4hD.,?1ns38qP18iUDqL?gp[=k*IE+scZEJV5M]o!U\gMT&n-ncY"SV_AS5J)mf]A6)a&Dd-F?.k1b7SL$l.9CPf[7VlA=+6Fr%GGNNtQuKn:kc45DZ.S-L#*g+p3u?$eX4aN.H7jje'k.]'5C)BiCluYlmN2r7:><#5@R]*Jc]Zj&?af/s.6mGL(RM(uN[WS0=&(5+%?X6cEh)4I?pAAFpIG\AKp7"RZ7&Ek"liDVEML)$04++Fg6_'UF21AP?B*T5YP8Wj`h[l=)s).es[^gVP4d'\C9''fQUMOEjq`Clb%]NJ0fZ-;eY41ML,(]932nJ_b7I)4_r_^H-Bd:S]&&*_8>h1K#C\?t"ienBPY^36uJ-hUM"/mNca\Bj)AL?RNer-c-SSQ!0!0CVA?%md\M,+84f=hUFnF5<jt[]XruXf"nrN7X/n+/01"^L#U'&UfskH<rO`[d@5a$0=pcneuaHrZ]DE\241#H8f^p+Mb3?0Tr[Q29!S>$%@as`=ml?c\^]fPp@E3.*rCKi/rk:KQ4%EQdR@Rj"EHr.COk-[9UWWs"#H+AL&u<DYNRKST0;g2_d6h-Q:;_+H0!D6cb6ch\7i3!Z%A-bIF>K:sTb5p!8`(>F7ZGA'@H!&+o^FRPsPtZUX9N`e3")gNg4NSA]M*dVc-"9'RCk@siNA$(J0/Y5H-Pn*:r!Z.T;9\U8hfpW=%JE8.(@5.$B;;j'4-VO&:lh4ShY,k)r^.CDh*4L,jW$e%q1]7/hZG/\boNn\$W"/Hp\FY.o99*V$#ZbiVKJD+=mh.-e[-icW/0?&S%A@)P:HVc5W[W0Q(E*#r=Z(;d!5i1?H`1GE@De*?rf3UGAc",2QHA8!bi53++S_K.]J\>0:XMjSYp@kH*WI#F&]e+oPL>>5@^URC,%5tuI$YsH&VX_#*KFXYqdGtgX;[r;&ihQ)'ucGeH8HIEpMeXe2SG?_^aIbsaBW3NgMa=j,m8GaRObMfePWH\OrSIlZf[1sqr'o;S;%,7/1khFQe_^M+G=S(f?`-1Fj_Qaea$8T+_n?-i+BZfTgcBUS0;r4O`of8"SN0guj0>Dp0?e;hG@GF++[o6;=.9N>C(A,X<KB[@O3%45)+oici'g*[K&I%:6(+%7<9pn7%`5`R'Y#dOim%&]UT<E/?g;jKrRS/c6D#GJi-SQtm<.**9Ls6,)q,`M`6YjOd5o#L,91R8Wl_%h4rkOa3V,>!WLtI3,%).R[W3<GailW4N5WY2L>9jaIA/G0rjk/UqX]m`Zb#('>^Pl^?-ln^Fdt*MJ:,cSeq'\pER0YVi4$$rdFf^%W_*5so7-dOH:+H]k57r'Csn+-eFY7WZ0?Gkdha6ka*N)2F/GLM4Mst=R=U^3"%$=.C<h!cL?2:-AHYTBFm5*"dgg'E3QhbmNoPHX%a\)iHZKQr$-dBFb'02LW,q[G0UZWtP5B%8mXYO`ek*\dkTP:Bdl._TAZ''i;>L#s2AlAFWk''eQ2uOk-!Zlul-g2T*8`6jOdr9FO%caRVYRktNR4_M;kdRUK$)X.#%05)Ya^rI.,dP>*^OY3=A$dLbEdSW,rjX1Ah1r)#5^1#atG7Xm6P42rbXsNl5!nUj'mA*>5b\aLq%lY`;h]32j\-[K/Yf*gERWT,G]Z)o#4Qo8NFK\Y"?BdIW>jt5%s7+d1W-3IU6GZ`1a@5JHG6niF>2e=G4P<_`W^?$WM-1D)mGYp1Z%c:TS@!9$V45+-t<+TTVuX+h@+8f=EGBUc^JG_1E,0X72U.i#Hp^@-YGIUMJMb4-,-U!*+ZR.3Fh`-bu,W1Lh=n<6UTJqS</ZrB<&%T`;Ep'jVFP!llttA.&p*!n#M0#*(.R$7q[o&1BoTfPV7n`Gn"5`]46cOiM`J`+#T<F4#"b&]WLQdWZ"7ZmFU?b0W%0dpk608_:CE%Bd62,d7XYW0.ef*@cSMN\aoe'$]lNenSAEJhKH[il&pEJ>PZ3YNq._`^j!T_^7"U%1D!1MOp4`L'['5(TJcMr;C$%L6e!LZ%6RJE%Eg!:g*/.Z`;L'4incR,I/k`bB,ondLJ-&(<,!#9hk!-a?D*a/%P`PJ[a-J*Z#E$%@VKEmmkYfb:^6c'[j8krTABHeQ;Zr(s@s6<K%/dmJP#\'"YOII53"7QGeDmSM%PG9\2EdWq_V+0A&M%sI;'a-"bboSjhog1KVTgrMd4<L9L,aKsSNA_Pce2i[\6AoF.d\;-NU;c^E%h8_95NCGRO;W9T'HpfR#_<<SgUB.iKJ`T9O[N=Va\s%/_T%rsdh8ulqhLK%FHC)cS1<M:6.r$;\TLB0?JAmh?:?Z^]+9ill>1*JX%TaaT$RY1oAOZ`se7YbsG,s:JRYb2jll"a2*`/UXWSIuJ@`2+g<F^/Vf*7mp[UtpD0R=m-uhEr+&;URf=Md[YOL51n_1?ju-X(Qa)%[=Gd1FhqWmA\3[->t/\F@72%>Z3_3IS4>\4fV?9>o>'I6!":\L\kI\%"(XTh_1uk`_,c*j$UE-R5WLUfkt;7^8!1_%N(SD!ScQ]k%M'h^#7rW;KU_a`0#:,"7e0g8Q0IMU127^?fnOWN)[=Jgn"Kpd[+%_$A'eIG,VpIh@A%8rU-2%CJMDTskGl[udQ<lsBc1r[sUp"$8%?SaCSWo^*kMlm;c!"gI_$pZeL,\[B:WC1#6`kbN(*b@)#;O_n?bQ8mj[CG3!TZ(MhG@<A\"4P%MJ5hD[!>a$^O@KJ?okb/898\R6%,%!b>Z^(p[+92C#8[U4baAK/Y).ZN+R?'%4"R,$aqqrgl"i+4'A[-;d_6/WTU,IU])e%K7-Q#G+bEO@)^1_OL:IYQ2Ou8))9Qk?I%7X\19kiQ+9hp=8$M^O.IfE-Rh%*2BqM6q\KU]k#55tjDt#5Z`MQsj7NI)(jhkX;35a\X`l5"QQZI##*F(^?/["226O3+l,#!drQu%$pT.a8s%%'9UG]+"6u,JKZ+=D1q?Y<8SCMUkOJi!\Kp$CNj^+0^39%2"\R.N[\Z)@dk80[e7=-!Nqf$&D[Sm[Z58I2BE4NI3e2YP%`6gDU#W3Jf!T&W&!#\*21..Yr@4RpFWg#]0G=/uP>'RtRKHK2kgG>)(YpT08lq(N8@eJYFHdP#jd_LPTYXinuh[h&<ndTEdm]M-K%#t1nWQb[H_n=5^HD-;_2]5U).MHKO*J%-9d",K2me!>8B)WqZTI.43&6oubNJck9GJ,pNURu'Yh9*rf:$MGH--<>3k5Z0KEE+?_#%Z=DoL@kkHT]0Q5/&r9)Gadoa=)M:HA-bBg36")3HS-'s!O+^HIC>WLT6[WX4T5$/p^r1ML8<jQ`(U<OI;i?nR"sSCfd>\DRHNRY4%dia9aT(R+efTFDoU!7-R<$?i94Hu_!)!(Rug%(?f)1)YpC5>4s72uP$7Zi6B=QlO<@0.jed&&I:"r0C/4LVe.F]+NC_SsBnkq(gl%_oF1"TH`,9D6t&r)tHXM:P2#tlXLq1nq"SMYm83u]MRKrH5!m2pTh"Efd]p*-Pm,I3@=mRL)\1qc9`X%D59JFMteHW(=OD`j?-=\%4V5Tr;fEb*TreJS:mqI@0(7$#Hgiir0o=koQg[1&HG!<P36-OSbkUe71Z6GF0LEI'$,s1Y,7Wu"_?Di"O>/-[,;)'1SsBR.@(@I*%"<poln/W-/>"ZsL3CV;>oZ7m[%-o']U`G8(K3elt6\JO$_uUR'Gl]l9Uc4_66j&do*TLsuF_E+BoFeO6Bei\*:a]YpF3)i$OZdea%?D+(t1#$tik'CF&nSUZ^[g\)uh+G<Kfs`,J,I]3i\>EYl)bA-c8O*O4@#'Q6c8Sn`&.G/LIKBfuEJk4Y\>&XfEc#h:YYUJ)!)WsC%(jQf2.;:#n`WVKg!nKYs#8]0Sc@lU5j<9VM(/bee2G(VA[h'Y_fe]:fJiMF/Kmg+_1/(.kJJ'q!PCpN"Tb0O``54s/?-B^<:eaK^%6u_@R8'2C;,U-[eH=#Sn.W[c"X-qf<=EI*1>@mlm%P)Ju"-_]mU+RW\Fs9I%P8(Up:'N7Ve7*)?6up/2@2,:FY+Q!,[4lHeH._]j%f"h\X6/dW:+BDrs#`uHuGr;4:N!nJW>sXB0dc-^eX*I6X"cX2p6sRT0`e/rkSCE>h>MI$q#o?&5fbmk7jZsKi<hq7EQP0YU*<B4b%*>/epc]$R/KGZCJ_OG)+BN"pY1+[SOWJ*?`<M:(N3]e!Wi&h/"Y&mRg+HTPmn;R]&Eo<5Gl,c(eUtr:Y69PJM*k1p1hDPPWbeXRq%=W)Qs5KHkmm<PS&M.sbK\aV6tHUU!Oiuj<r&*H,=>Pqd\[i#IN/<Dso]U$Ip%qI`(k!]C'O4ucF//N<(*MFIEkBRQ\p#%n#+r$uV%>[])h5$TK9nnl>J+AIEsbCKn+fODlA\@mu@2S8#ME6<fEMrFlTj$S)h4AW6t0aH3]Ns8Cc)Dhs:RC?`q>1[8*m=;)c47[uZD0R6T%@WM$*7E=/[V\)NuH@R">Q6=M.GJ]h]08W0'LI)HG"`.n(IR:&bUMGOH[_nEW7G+YPc;Xi\0mY*f(2q2,+-7D^>mR+34n5Lc,%&Ic%PSdT^8$SK19@GhU1U14[1Nmn(XdpG%"&9>aT\3@lE>,%iH$\Rud#d'q$DU]6F4B8:9p"7k+N_'6Y\r.`s.LSU[L<iU>$sDq3O<!i%C]J+baR?rW`8ZsaJa$+K%AtnR,Da.r\&!LBi_Q0t2N[!c80CO+JO#7n>#TuWCnunm%L?ab&*!d?X=Y;<$oMn#3_S4_!*j*`WWDS5%"E(c(XJG%EE1D_,,GE1p?Qf$7/'-]`"HleCfnPrcH1QP25=#&ag6%nMK#*:qC'R<G"+I4\8smabYi:nJDs;A)_$N,UN/f@'2ZTX:%TqB8<fE_5)aIsbq-b1Js+b@VC8Wk0=Z`uLtQY9C\+d;96mVMHL'.,Ju#1$()U.$aK.<2-h3TBd<i]#k/LcAM"ZU+[*X&.iR:9Tk^%_?h=*K[6qmhB.1KMME)[lSHIQTF:QL%SIFCT%lV1j+qNT<hP2$>`g2t!qSO2"2W(sR)hCPMo]l>FHe3T',q%X)`%GrNbHLEfZ\o4%@[A*n>)KTN6@6%G7=N"lfQB3p^to,1-_$on`/C,gnP7.Q[TI5n(bAms*Up]RSKL"%k\O=NUC9[%+jCcjC2]`u=Cn2J!#M>_JeDDr%j]XK0%oLOCP!@7`fuRO+9Ln"`mHu3aY!#L3UkmBXfTGcqm#H[I.Im`G:8,;@3AM`hNO[t`qI!>O_3=\d2Wi*IR0\ghp4ZnVCj,_N%,Y^E[VXS=&+pg7<aQ)kM&EK56'(F9L41n26KZ"_MA9h\W,:uIb*&/%Ub%-7%D2\-^.arN#D2Lak@5q?ocXW[@oT97=dVRdCp*!]7%K*>*4M^@^YV?iZt!ne3)N]hR07\Qq3>78N99!$I8$AQWa7Mg=W1q>XI:rlX(B#reI3Ve7R_iUSYn!UHaM5S\u!\o/j.bZZ-Z1sOd%2B6.]$mc@\)u8\#Ws/d+`*DBWaNHsb"`(7t&Qh@<_?k<)',h)r!7d?fQck4LT?3$6dZPqQEc*4%5"7q>K-VRj-64.XCOFr+m%YA>%%,99H`!@@=BFlI&BHe!-!Pq2eN[@hT,(OE#^):/&7pa,5Y3ab\U6L>m0TqBjSE1@]*8@_TTWXf"_!3/-6^&tXP_6;s^eXM5R9VC*%'(H#=D=RQUPLIS16rU]]:fa/#qO<3W\])#(cu?AdAK'njBHB(>/&s"n`;G06?4@'!5'&cFZ#$PjPTa[6Ui2)DY,i1ZQ4aq6oj!#'%"-85+Ebl";XLuX<.1I3D+Ne0h1)s69ZjD<(hE5eG0q2bOHG`M9C/@'G=e.t6k"l5,FJ!2uDXk-dC`7]8a>UpOjs9aI99m:^/3D3Q%Y0#V6iW73K^lC<H0oHu&_6>+=(VbtM:YQMWj=,'n9r*:3U84isLJ'pidVqVZ6EuCjk&X8aFrMhXN$-YI.6a`<3V+X\USWZF"Ip:%%8-LS)Pn"<EO+iZ1X6(>+4Yg.f+6@h<(3:HCrW=l6%`F8b%Q"!*P^!VP`!CH9Q;"e_!MP5YSKnPn"uaC1nDX:9MSVf7"T8nT=^'6Z%j<8L=-AMdNe#k.?.0R@?oPlZKUaAVXg)E_9gqJW1**7(1p>m9V6VEHHW6kaJ!L;h93@5,Bn9I9?4b+?5d!Xn=-R<$<OXgpJJ.mt=%E0:ZPZP+R?9<u^YauJ9u,oq`X&<E%&QAN[X%^0Qh3;9X:NGU.bW]3A_kH_6Ba*W\;,"CRfhmN-n[m?./SGas%K"uZ?kJdb\OXH1]%!1>HHqf+6KY>IOB)Z&YL5\_-k7KFULb:*SWiRfT@ZY>,<NjoI2;^E;E*;pJc"`6;I5`VD;;<dB,^PT:$>IlglQ6BWXi&kaq^$lId%nDSV"Bc!%6!04M`JD=SJ6:%L\/+A*PLLkG@&Y8Kd^!"i>6QkH3)i_S%i1j>+p4YW!S3o9_2F%pZ*(fA47NsqA=onU-QP8R6UP2&p%,!PCqNHC&BKS2>=<L,g]KpTYai?VM8:^pbjF[DP_"hkuN_fKEQ!VF5n,j#LHgpG9Z=`#EK:#FRr`I\VV;[MPg/PfJL_4di@C:SMM%Np"k!hpCHr2EZ4JD;iPKM(2sfN)W?iag"'N#k7WZX&BZ!+>3A(iW3T==UnlR"$-'6i0;jq!U7=KHRV=`.kM7mg&oW*0Ar6sE1CJf%SY%a$TI3L.=G$Zp='K,n\f;4V9'8_[nj<t9_d_Ff1E&H4,V5R"Ugn7Prc'@())00:JFmg6D9(._Os&]CETHR>E@sCblcA3cj@.M6%3XZf*fPgBh/?pKZ*-@BG%<*)co/o3Wk7D1Ues;OE9UGKhCU8l)X7,OKY`tnm:D9QmLb=rJ>PaefC=nYtV1;]j'+j=uRg%i&(/pQo%5]m39U'Gj_]hm"=YZXEY)ANL;7Yr(L<qlBG=A)I,ZjqX8$Kib^P;EEPLk?6qqPO#i6uSe*/:f6Y2Hn2Li?enl]WRBQ,m0,f%ZSkH%ZPs'sJ.ho<7.in9^c=;`$;/mlJ\MT#$`HbM-e-K31^%*7k'B<8+iP*aEKG"g87?i.R\'T%3'J`ul#A\?&iIR`HdPY*B6,5KILt^4%Z4E\<Hk*PE=UeMm%>E\OE8cp!7>PD@Ch3Y9-tm%s8/fgp\I=*6XpEOD`Dnj11_$G^Jap/P/XAAVJ.!:!#H51>n8l\]D1QXo1YSYI%M3UdfUC6!E"K3h<f`SUfc1Q0lif2>d;*#?jGIE-W,_rtdLpB6[7)BK2)W%%d,q)L#QE+"Na&!aE6n?o[`545r^]R,g(gQW"9tg`*%D!b;YZ7F.YA@`KDNhp!LR&A8_Rd1,Ad"7>gRHQV2^ln&klcke'G5%-7coXu&24R*l_1f(?K_ba6D&p[6*0j/)\LM:_&4sg\O_(qq%aW6j5&=c@]&2?loKlN+d!N@5/>721;;V7i7-mq=k_0R06>RuW.%oCKaD@LEjrWkc+34_#Y;WLE[>i00\X4[^&e>U.QTsgc51&4W_%3Ee2#\sJK#\N/qe#YGOC3AFB&50l]Vku#Xh<(EEr8IcqZ+ffEM3htLtc;pUY=Y+6tO_kSRWHPlq>:*#^[$hsU)K3!iTXUBZ8[8u6%-52);1mA0gZSbQ550V_E99DO,k!BHN-I7VFR#BmC/9b?D8<#G^Rr!n2K=Jm$Lk\;!:cBnqa@d9,6"67-MO\!+JAnqT@^7DfB?@a\%*2k^DZ>om3kXLbA0g>WgF>5'pHk+Z]<#hB@1^1]-cI$1s+t6"@ptq,NI4hJjoV!/k6X82[U?^195\[G2Y)O`E_F6P"+k*2!.'Z#k%.t&\e!4"^gcNP*ePm)?L$4]hO:sR"9)RO`IT;2Q(E6,Q67kY]W&TSl5)_>BJabgWrij,Fnhh!;[E1gu>2'L"Ngd7T]ik06lH3bMR%iGjqaP@c&;#1ZZ36<(*25[/b$"IokC13Et^eDMeQbWL8TV'$MX2@B/>H\f(3?i[C:`Bs4?j"-C<->blji,U+!&tlDUkFt+RJN.a.%M$)CJZ/JT)Zs]B!HY=DNA1?>H$C]'siXN]F2]70EZ3`s74+]X03fb#TM)$T[?^j]aV8YcZ`RSYh;'[TnfHkq.,:GhpB?@<eZLJoJ%#h+l;nTC&!\AHkX6[RZHU71\HEM[`02pRU3:h\f'/TqZA_:q=oKr`s)o#r[OZiO/)S0o:#],"UQ#l(qq4^oE>V9,Z\Be^I_jU@lh%Zo6i#+-eB*RF-]ZD;p*;I$s<:X-'#?i+lM!TM140[Y6I`-7Qp`/40OH;\4_RD!?cnQLa^[jA/CY5,-69'Pr!paIis?-p87lbD<SI%>AqKuJK&$MM[#_c17B::XN^dDnk"\X`h>ih#EV]cbQs3*!L9>9lkg=1i3[2.7C((d9oc4',cMhH_BdA7^2e0B-bHTf7KG+f(n*%E%$,s1.@g-R'Qtq+0@_+ug\tp(J\R,&C7=sH]blk6i31p=N4q=&-AAN6)c)rP./3$GE!>nG5\b;6^L.EuJ>*_@qZ[MB]^uS181[;po%IlPa9?2-sZE5EA#Y0G1N@nZZc5U!$`Fp<t9<!#Kq-F8>_p"4glS3>@WBd"*I\1j9Z/>pMtOKKP<>S!L8:6ce,[UpbS.)ACJJYN5n%2KTV:)F>0<$Qt9k/XG$tet5hZMo/+VmmA8"6f,h?!)SPG3g6FuoQ;u#7mr:ibRTsUAZee8!uhD?aKV&5AYOUYN#>l!O#@N;Sm%Z"%EM=3abqAL+4[>;g<TKe^mEh!k_YH=q!IkYm3C)Yag0WE0K:Sq@+[!"<c7dkIZN@;'!Oe+<YrGMmTMUNY47j.-/O5>gA-b\klu\G8%06_#)r9$MZirCAD0'\P7rd9;65in+81/T7612_W]*'R^c;4GN:#)]Il)A@87Q8G9jfpAQg0QXp8#>,%3.Jg>5""BA\<.G98V&Cbb%hsbVFbGU*%?(=Q.P(b^9eCTe>.AZ_"&jq1oT/[e1BnkW,EEsC4OT`,f'0'C\j9KF/!XZY=!J<^Xn@TLT)EtEn#E?Z.2sRsU2G"rb%a]L'Vr0-jE'>C0@rGA&1=<oFW>.(11R1OuY6JteJd`.sg69c1'n569(Eh:eDJp!PM/&%+]Fo*489FM@#A2Lh-l/8Mjk9;%G^2%d"%!#LD!AeB]3*8CciHj._)b1(i5A@Tr_+EsD*TG38K/0'`Q4HlKpPklVIXV_?mX<j?oP_>(,E&S&Hm>0J41i/BXOAQ$4D!G02U*,rd%dXr(mlP:Fb7F-fA(<T,uWV1Q/jUKH%TQCqq/rI3(@XSL'2+"lk7V&_Dc4Hb1CV6&l#`MWubBYV"`eUu_%puIEb_uiI2/c+Ue`V<?%&`<.Io5W0X$a+WZI6n!dfIekS+I"aK+U,NW!=3Kh14[;>g`ddHYofYg5#1&B'h6Vqoj'WukGp!Np%]f)-bFDlWOPi_>q<dblYptO%`'gsY$Dl_)H]VFI1Ce)TrQ`<IlN&e7YD$$Ec63646nkOF"np&7=A0nn0W:1TBW#+8b]/>t)IC7ec3;VF;Bq)D19Ej)h'_sP_^tpk%]%E0p`$#:#Ok[t2RhS]oaNiJIk]n+KAtU?dFTice(.)cr1O@n:ck"CeMp$Zo$/+K,bFOESRDD:fVC1-h(#M-h[S.1AHq[>!aS.jM%oAMMT<&Jd2QogLm`h8Y56BXTQVf:Rr&GRYTHi>(5JgcKFfk2L,.%c,773S_RGuCLs,%1%a*%MT:j*G^!!*Gb.aJ(8O%t+CDr'1rr%U7<99-oP]G>Z](j;.?6$-$#Di;c.9NB^`f'iB6b.b@'AA'01Ul`,cs8NG3B$#o<j;6m*`>QdA;Q="%pY*8iqSF$9$:(N0BMVTe[O%,qX(D^aT8c,RgL+Li&er\/QVojYJC-NO6)#ZIfpHC*hk^!]`nB'/>:p.&3V$*pRh"-CV$OPCe)sC.fq?!^tYeU'>sAaH#9RQdc1!%Og<t#Pa$A'E7@Nt2@d`T?f*O@9RKNQ*m.^ua>H06R?CU?n"o!CN`M9=9gg,V<Co4oo87$_PfrQYU0c:b+gH]jBN(]X"/M;`ZmM3`%!&_M(nek::(bCWLS!5*a"`CWVNWQ)@mj3!3RjVt$oD*E@!*.4"d,o)2T^D;h04hG?$Z&]#8FjCH<nVkbK#tQd*!KZ3iZk4/UKeWP%!BI9B(.U"@&p1is)27;^=Q"U#/-8S=BjjtanL[;="H#Q(664tF@djf9e,_lu>8f$m#Kh92K7M)S+8:Aa:4t#3R4@K5(f!IJgqu3L%]3Gkm7Xh/2fVTS.5DVgh!cWp=_FfH&$XY=qT8U?f+81_B2Uijj2@SPqP"R^C"(H<E(Y8sUl0%Vk:E*rc2IEY,FO@UX.m&.9"o$Fb%/kZ9BIDm"6BV\H;[HQOqY0'YrN*;*+"ZWH.R1JrP`#&>0/kZ1e,DV"(EHlNA<MHX(\HAtb]Du]k`;C5A>4A\N=@<no9Q3)AP+*s]%TOgUR4-'XKUnksGV"oCr";a'\7jHUl9VoF(fB1!T)NgoVX&B&BWI_'%8$5s:d3[D&=A2)CSPhs?DU[Uf15.ub1\g=?)9<U:"ljRc%Mr=lCgMe/LUHg9Xlu=e2bI6&]"@"&+EH('V5)I7FMGSh9+>md<=tE238RVdp6V`F*p/4+'H!=1>>\Ac]5c?IFT3[PB,73ie+1p7n%RR,P';rC6oM1hHR6_/`PBbXkM>]HOsGIXaL&<XfD"7uUY)h<qC.$WZ46C[_(,64'GUB-'%fbhnu3d.17#]QXN%Q5>'YS8fVb'<#o%*btV<V6dW@r+AtO8eIA+(fJHXg/rAC/3rnoL2oik=$*W-7')Dt^8:]U%`?VV2:mc;bQ9tMQWR't.$iim"]^Ln+)qGkC62CQ`/LG_%)23,kmcH&+j5&kY#9#`O-TB[8m_SMV<i&mUdRuE"-7?9!YcUSJB6=d1R::g18mT4])P(smg]gGU,u,ghBaYqi^pnV(`!p,2ct%u.%KG1PV/%S$ko`.4>$d4BG(#YNC@E%7hZQgV9hbtZRNDNSGfM&0hP'$j5IQb6EbI_ijUcmWD6f]$e7WeE#r>ZgT!&.L&nbdt@?b9-R%Dr`6XJ<Ur&"L>S2(NI!;<'jIaH)LdL+n63a4e$5J!ks*+Cgkt^No.DBU^*R'?I234U@6$o//`(o85&QRZ6s^6Oe[bS-TQSUT"(4'%QT4f*!kiDWC=[@??RkkJDN/*5Pe3?2SV_u/EqZF<AW1Ho3J5ZSf>JQ+X6m9P`&edH8u.*L%L(JlA^$H`%2JbgVLasrRmlfe0"XXf%T/q4),!7Xm)sQBh"qS,GECVfCEqZGb2KXn<6kZ13A`X]b%C2+<olQI(J?-bB<q"+/EoEtAk:?bI%t(%9h:*kI9mLhHGpkl.PkI3Z%@c.<dN'k;k[M0/:Eg\;f&3G\-cB)M@J?N=94IC0VKr^0SlLuE7Xr!A6"9t`*]IXa;+no$sqG5.pn.O=h;!L[Hg%H[l^o9*@gfe(t%=57t)Uk9;">N.:aG:p,\bMSb?SBOH\,kH!\-4ltDD7L.cI&+opR[l*g,Hr=e:[.^O;bOM?8BIPSojKtRJT)/HLTWUfSF:M>.0/EY%,7ZeOWKFUaZ>5\``8*"O_.H1?jZgI3FS1&R=lLVL+#]L6ZGB:dM[O39^h(%:S8#A#.k!Zd@8"2YP9OP:=1,ub\pR@8@)gU*'GlEB%WTiK$6lG5.;,([G#8<nH&Q`p;WtN]:i!QtVQ\HNiJY\MAFjG*<-C'g]eE,D][\Ym"'J\G*%$=I??6gVY&.94Z_U/Bck-9?mCDZ?W%q3o<.LP:j]@<-0LXC.h&SY_`->k?g^()Y'nNX-q'+A?,qlH;aLmVS@Ej49NLS'/9k"h/$dCr$['XL]+u0f5kW7O2>71j$CPq4&L"%TBdd0;FQOgE$U>O-Uln3@6#,ckM`"db@SU5=/t"qks<J0%9LD="1l\,h!.EpMVnA_X'p"L@I#8,/%R`\`&Rp!GhK[R(#"u0>25jh%R1,PZN<Mm11KnUC5=g/N6e;q1GTb@4PeoeWlN?fVA[t]im[K6&6!Fs,BJfO<*NPWRY!e0&-"+dZ1r?@UPt`h[n1;hdqNMtf1g=<2%:j@SK(QIj\n4Nu6@QUkB+$Wu@dDMLf?pr(g'hh\jA;UFX_UMMmL=G6&L6<r];FX=q>LUF+[3)C'GP-E;^i,?)Daijbd,a`a6jB?-%RA%S2VS(,\8dU9N)_Ese."c@kNo`9X*k[a'`F)S'b?#h5N$AR47n%8=_H1)\-GO5G!a8Y^,2Sj+o/a*UOt+IsL>l#?`Bp`L^,1kP%&VP0"Q-V>tM.#*pkJAWebAdL)A=[6#ZQBBi"Hb1D/oYqg(u?pDB!GW;%U\<<%lprV(IiM&keQjWPA/ct<J@M]%nLcT^_a*I#QStQ%NP"[.-Ut3HlY##."`UE([e]&0B+!RV!-a/:k^usWOU#Y=TiNH23!\J&JII8LrD4[=Gl?2:]cBY?XcN(";b*`,lMF<>6W(OEK8nd4%$?U8<_dQXZE/knuj.H[S"oukk/WILF[9#M!c1OC'j!A[*PmfZCp%YTj7EJf(0'BMu.bRXH,0CHo&?<rJ:1*6:J1E"sSg82q_?M<U%-9IO['*[rO'#/,>a?Z+d5*eY-2V1WCHu@jp+UYbS*C*!0qFh2n?ELPF\OdM!)u9sD7nRG=G1FXr!U:kU^mXKl4I6CY.*u@cJT)/1%(FiQnEQd%@nG@!/E7:!/HimA'\2Ksi!!@%lF$)95U>l6&Xp*8:nY61OMi.s6>g^hKNZmkY8_L]88HtOm#R,S)/b2^X4<nJ.8[`f#%CdVrFjmJIu7L*f=ROh*R^*VB?H@VIM"i$]6p6/q&r=q]9j5W1A3J)Ab`1e(ifb_]ZVNb>/Mg)*^$*+XG822?t*@U;?)`4-ZD+uD)%Ro[V:@5G(.`Yr0V]T\!e@L5SA^;Yg.<!;$;0G(BJT]R%n-07RN/eVsk.tB*Aq\XRA$%Vi;V5"8#c9`%DF1i,-GX6$h]3mV=OcpU2%_cjW0cpf`FW`;p?cK.L!N.ET525NnWP8Hbgl)sgT&i*W#SiB&$b@N6BHN_&[8T.8P&IPEE9Bnn7q?,J+3%oM!O/ne!a`F2:1_ASm%Z0Abn,ILcS>OCWD3"(<R8QiX7J*JD-J=>d-^YBe_oZKP%^gP)R>Yjf;VNQe!8ZCA:V:YhU1DS^l&9DUV6X!0(1cb[k_N;RoJm5)<%W!QL-h@?p)LY?\S*PI-J`Vt*i;/(YrG^OW6`LBbQB1Z,jlMk_kfD&kt'g7R#GK_@]$._0KBs&9I^e0gJpu:ee@<OC;1uj\u$SK&D%S0o_FG_'d13d`GU?=cs'$$MCaZoD_cM)nugFATsaeHZuNF#+%)];S_!]Yh4sd:0LZ&GZVF[#qBYEHoaSRn59_ZMKTinn9c>Ql&[J%MNMFm;fStrk2LXRKnr:Y>as&tA1CVjGYu[m?NlF:&C.3IZ?IR:Oj)j4W*g)?V[gjlFV`V;7hq#tKe+o5Z1(k@BRhIu'N`U/SdfSC%Udo9^KEFLtT@53;\-*8<YQPkH=j/mN9FthQ(l/@RpGjSC@Zd;Agcj^"MG\B":$/`AO<]1*^rFqma_AOePeP"Vi\_mGT8mn"*6.Sc%69)B(E^iulO0c@!aHT-r*5dVLG+m=Ei@4j@[g'"78s:V[=3)\nE1kU&9oE@I1SY0(C>^Y!EJk#mZ!md;a6#8o,/]^eq'!6*kSU3b%Ao%!I+FF[=U>81!E6ug195WI\Ji="Eo2s&kANl05P!$/fH;gW:RAi@)N1q)A"(i(I@g%AL$(!F.knKZ.\;V7=j8/\6$(i)4$]'='%4ST6m@nQV9>h.d('7Z%ZK.m>@<eWmiC>`_I*#U([`0n<@T/PYm),Xb_`=q$n1a7ASnB@-?GB#;MbdQ]u=#He\be`Ugnp4!F&rThe%i(nF1+`@uNJ>T<<C*Fh+V2^D0pne_1`b=o$.H4q?-Nh^.+Lb#(E8o-DCrlc6W$LD6Scej!Tm$+h'$UCRp^@6P?CQS:0(<*864ogk%UDMTnH(fnpi]9W+q"u*8h]+CrFrN8>GZ]W+qSNO4?l<lbn<#;GBtKm1`?DE.YS^9>kV27Kl%M(;p`<Da_e'SGnG+hLQSs[&0t9Gq%9?cAH4?\-=`oZ88=tE2.#HYFaPqd/!Ec^29YY9TpLo$2AiL5$gc?07L?V48-bsA>9$\RHkR_E_I>eY"!MSe@S60.,I^5M<EquVhJ%i9UeD^V]4XSo"dUQ(A)Y+r9$H7EfVY]d\<FOVBN'7rg_S4>R@&&d3Soj6;?P7*'=hJ`d7X;%J&OD'c^W7`:&i'BB9<(]W.K(`)g8%C/:N36:;EPYb7l/8"</f:]as03("D)nc8cF/#rC@]kpCUD+1^aPA?rGXmPtf51edL7L"ar`plNiDi"<o;@/()f4:aU:qHKX2[:*s%A)G0O`?d9j,HBMZ-Qi->-;ula.L"l1*@h=^+RkG2gaEE@0Tr$RV-ni1o;,#[D;`N!T.ah<>W[WR.3^7"\JIba-id*KHt-1e0KESW%4].0njPpGS^o+E>[.(J55J"C`R1t"B83QJ6:V7`T%H=9egh9cr;,etNcXCG)(ZgeZnia[TKbFZWYH4/O)*!F9UrYu]pE6kn\DeeG%6\F@N-1""C[)$>?:j[RY(4*bO3/?O7.=ik8J.3hQ1':>,<(+ml*L[s.3cCmI`6>!pqfh,li8l`5,*$I9;K[k[#E)aAFl`BY^\%bP%i1;g_GE=at5WD.cMEMc2Y>8VQUodJHc^.)R;^*FhUPT2hM!Z=N=.C)FNCfU:"9EL6+lL3WS=qqM2fL+[%mq4^a5%'s3fZh66DY'p%nb`U8$Vi#DGosDt3l1hMMdRT`+_?n[O.1//<'&>M'.LRKjN20:Ip;*A,>3%sd4aEBoOaC``;?g(":>\_5[%hS$rR1"!&#c0#mpHT%Po]IpWU@pb^##0BiK5!2GB5QWHa,]%UANH'ph=.@oRA(W4C1E8c5tPMUU"5++S*nhQ<75M`)<d%6MNHc$Ed&;;###ZE0EpBq0H4E%2NtpON'%\DMHWa]p5sSuO1re'US9^u74ql8!R7MfilTC9"kg/8SrglI7%lP<j=.XQg_>A38m*u9d)DlRH8'>jaQ\R'qrNa9d52PC%7$\M-YsPVc/4&T5p;R.1@2IWI-Vl1K,l;rChW"l8i"0SRJi?!*:PEib#k_1nK64Mk<e%)I8JHF\!*iSO!u$nLgg!ehh2!L\=ec-9%<:2D<im)kG_i%8aOQ\<O4f?,/AtM%cf.g(f69/s_lKP=KqCI2JL0bdqf"?,?P9R73)8"mlR^*9V&XeC+_(n%4'rL4`O!ZIIWc_WG%WLtH*leK!m,ZR[3kST@;pdFpt0qD^q_@L@;LLWiVT44PD$o"'$cO@V?+B.8KS'"?',O8K2FJF^q#i#PR6'ga;JURU!.K-c\+J_\W%GF*25GVrb<FmG+Q,4uig]m7/pK\T4.>pf6&=;2bUgQU[3&p-f=[G5q.d0ujG[G;qF,"P7Zi1C`i1JKNXp:,X>QE^fAUj&B&etE%&%\S/1rr;*=:/BeXYM)+hNTf?_6.44'_'7rdlOjE-!2%HH@7iqK'1Q->9D8p5F[?p'o,Z,GV(/')KOV=M2Qc,Y^fOHAm[5lHqaG+DJ%ofg%R.Se9e1Z9<[XR!Z:+!sl,?L#/s-42u.UXo%(WGsPF2a*m[_:BbrgO0&VTWYlSZiTJoFJSdp*P*`\Z?UF`hOp7;\1G?_L%&a2%d7^""*l_Y-13Jc#aAPT'G5"`e6CQn')X#CCH,:2_+c'Ql9Rg.In]NYD_?$JNZ]=+gi3??.7GWYd;3d4S6;G^G2@PXZMEqUWE`l$+%1Ng2P(p7Sa6#@o+E]7JqP7Oh"Go7;UJ$Z7_J50pLC66l6UW"mOrjnUJV.=Vs*)Tcj$<l@f8=3l2A&]52e@SX26b+7U^u@eDWeTZt%CRrF:3<&Xu2L$sE#/iC%C"9Qj2&8"p8)>%bQLmV]QnI#pd`(QE47s*F%;^:]S<>DRRF!M6rN1[%AsTDNb:&gARD?fpj83pU1]@jF%jQ?$/QK,!cGi?AT)kF0:U#I:Y)eBcU_NgQ+Bj,8Q258&?2PXr=^%52g-Z]Q*T#`%K=XF9K!qb__Z(_lf&&ktt#Wj3hZK;FMc8hJd%`,A#>J7]Wt*eY%AQ.#lsZ^;;GWLfX&oL9_Rp=Y_V!nj3+B=s01UQ?nR^q+MF&sUrnAQ(Hl4t(4PM$7Qq:(pP@U>-X59HS&]:l+0c%P+'h9=S3oU5,?<CPFu4W\EVo:Y1#\?%!ZF&h5i2jTPho3FKb@?;l'9'%aP%r7)n0P1bZKLaVVi?1/'8n".NFoL^\O.qdUaDJbMRn%QYk/WIoH$0d:2(HKt(.KM%UYh[j/Dq63(041+4[:WkH%SgT#+"LFAu*SYi`.#eK1:nZV302%NZY@BdDFd3S2=LbeE#(s#]j0HT'q%eAD*$NX#lXDpDcTMKuoLkQk^N5Dei>M?W%;H`t%F2pJ.5,+'f+C*>jfK$):nXaoe*jtot<RR3p([RGNcLs0F6`D@1L2@*5rW\kfe%dc-k-3T13E)^U9P$c>$(Q".si,X\41ARgVX1J/.a!GI&^0ZVZ-12;@Z-I<RJ#?lnuN$t%J;XbjGR\hl']88kV7#e!bnb[kn8;o.C%Z'Guk)GZ<'au_mnKmgS6)/G1Ef"e\[\J@h0Z'9Ac>nu`R1PZEjfc:eU;B(3M6sm#nA6DDXhQ)lE'HJUE^/D#P2;Ok(&A#*Z&hM@d%/i.6WR<kb_$,EB`[tKEfN,U69%BK%oYJ,A:R..eRO8#j:](nZ`?7LG,QmOTqBL=>^i_n!kYha64I;_t]2JQ(h[&A^UI+%,B-#3]/%bp%I.AXru/1M)8L/q=![&c&*"X^Q?(V"?"l]jQ$32G2To`DMaaFWg`!V4k,a5\=jK'S>u6D/3>&"S8)2-4Mh,Cs"8K=P$=cdSi`4%&t19'Y8Lcql^8;G,cP<[l(P1aKX!-2@M)qiH=Z1`0,0Of=Xl=XleCa._i4gMcCsa$pIr\'iUFn]<*u)cVh'K["cmr!C'K^'[u+9i%Z)!\C0PUa3@$&2ml;t7GY3O?b>ICpq1Ksn,@@KkEe[Fn`LrpgG]G:Fi$bcU`h*?okqK9?ZqLiuo6#M7PY@<J"o$J\P=N#@IO["5X%0ASm&LA>Fs+Gq4'iMM[=]8e[h8>oAI51/OP[L"^d7[uB9mWb191G@nmVR-?cLI!loVQ[/Q*M:L7TRR%,DGDs$,M*CGSg5f&Ygs\4%1"U4'LombGVP[_=HM2;b9J9j!@mcoQOZAI3b9QHYkJ]2F?<JXL81G7M*7i;TD3"'@QfmhfAC)\*!B)B#H.,@:?-aDeTg?4R:9^8W%;s-WBZ!%j8('DZ\r^A^fhE7nLE'cAN9RgS$`,VgbV\la=+mU/La^d6FfsY@)S&>/R$L.)_$n)Pm"FGZG,G:qn0h<r.[l6\j$4qn'%`lF/;]$a`upnV-iGk^jAnc&1&9[&\uLXACf3$C^';Ckt9giFo>N"EAP".hXB`<^:YC3I)-PjZ(lg+E/o8=k.$8AU^&\We)M@u)[i%EmQ>-0t*8I2DF5Rr2s"Npa-/_oF`BU>POJQ,F/\;fQfup"ZT%\@G\Z0mT_soCERoHW+41!YTB*ZZ5S=U62V7<K8on]RnX-7Je3Oa%c@"P(%i7n*<s7V#,FCJ*FD@N!!A).L1Ki33)rT'EX/uihdNSei^e(Ij9s8X8alflDo``24-nM`$ZD^'["Y-X!_WqOS3YB[Z7bIh6%.\fc&))\DETLNgGT0>h'jLq%c]=r?t]BF'kJee1G^<P[d`A*/3_J#,X]A4)3YIB8.@rF\Wqf86$Faj4qDbn(7Re!A[a"t]!+o1:&%S`M^SC63NN[WnmVifu&,ma1+#)O6M[Aa"b?_1uG`%UY]V[;aZfNcB8PeJ4o*NY6`'*_P..piK;J9>dG+7T9DS#($e*S)2XR,:M>-%VMS:8,Rn+K*WtVBF%(1jj5tLI]35)?#NDd_OeVXndA6?D\d&(%b5qiD3YQ?FA8+`E4X1A%W9o0JE&e*%0qg`b!s&=;RE0.u9]h.U%IJ)_)i?rQh<GE%bVa,.Qh2j(?EAaOMc:Ofr4i%D/ensDG=.NEm2F0WVj6:^L^=c0o1#sQYJl2uDfM#6k`Od[_A-eH]EWuVAQt,G[%3?QSMU:<tiPPrAOC.rEE&F7H0!o[K<;=)MUas;gi^d.9`q<MK@Yf\SE,cc8NlrR'ig!,N95E&A)8TV2IKNQ@q@1t[92kF?"maE[+%DW83aZp"7Rl@7Zc$B(bCM%TqdA$6R"9F@IidW70IJ./f6UPL$33s/++$t2sp<M,Y7#eYN2.>_#b.fKd%7j=flJ$]o/-OnZfc'C)i%B@h$G1L(o2oS>PgNgS;UN>(G5qs&poKX+fW>KrX;'h+`(6I?jUP3r8l:qK[?%8es?IYZQDo,+H'I]?:!%@PrZ,`4KcR\LTmB7DE[%KPO)B/fgjb*h>eP&Qk94Ag$Bh@IJK98.<++V5(kk3OoODX%oQEo!:EI<EI-qn`eO5bZMmL%'@<!eeZa![)JA\oEi:Hqs43%YRm9j%k7Pekb3V_5:FH*3fSLFk'5Lbn&_b\_>^ZH,Ea5Y69nN]U,J5F2AfVI+RrNOKBO9=S,";i/6@g%.fh<u'Z]]j`/KUOl9iF?(mZEN%%VA[u5!tf?>=C[eeV4Euq'3iMhF4ZDh$l)dNU`>N=/iM6M5H*]np&WHL&XX`=93&R7Tp6NN<m&qVL?;us.aAa+"\9Qfco]X9a3M(]%no$p:$F-60Z?Cd1`/NZW+%!)pJ_:6H'1\'$R".uK:32?p8jh+_hWIFu"P0`"s/nG]4djTo=6q4mC`a=G1.U"`7M.HX\hmNXLumZ]%;>_HC&W+#gMYZTA'3cip!E;[t<::FM)\t\bXPD9Z+MH,(G'X@t#f?amA*XP;U[(9(Rl%U_<@bU(''T.<rSD+nReU!+$@3BdG/*p"%h)Tt^dL!:J4O*pQpfS-.\\fe\PLW4bUCm;7MBg6I(2lXNLVM]So*&;Y[:PT('R4r+\k-&@`#Ih@:iS[GD!gL]X[rkddY\HDWlAg"%i\!cXo@qD*:3'4(NAQ(eQk33oKKL^'hR3on<^+Pu`Gi4:N4XZm5qBXZrDX0e@B53_"U1(7Q1:TLH1*IKE\:UGaS4ti)L8X6,4sa*%f3P$Go?<*cn[/[h6BLFFKeV!`N7t#E=VMZeQccs"W9ntC:IIEcYp('LKmgm29[UK3,;:3*Qof-Tk7;"(Q,`KM6>\YW-pWV^'LA]=%/b.)_6URoV:f*7qa?G?LC7Ss?$W]duq)d=-e^a!2Is6gdK9d2d2b\8$,SL^:_O\p5W"2X_DV<!hT3CcB:#,nM]e@YO<&0-M?HKgW%7QEa<P0@R3S-ENG3p't6+XQ]]oq>QhA`?>D7\_--D)\7oLAWm\rDG49THg9.1N^./a5U"nn#fu@reCXJ[b=#?AeWT!_ShS/J[%]5%3d8>06u6::1g@,3D%/jgMg$1ZM9)4ZNdHbdC8W[/G.Y,u_[!k$/)CdO:em7q.6p];*p7!*5$&,#-BU;#(DMlLJoS3SjSr,<0=E_!%'&WZ"DL?p,"P(M<V?G+m^jNY)oQJcRYMHFJ\97bE<^>=q[6f3Odui,u[6K<OPcW;.`If+&8"4j%(\)fYZ&#3*>mC`PiQgXbQ4Clb%7uL6V<h(momoiu(]LFh^c;-=YMT<FkGMP6;:nP=c-Na9`W[/7!P=5Q,DS[![97gRQ\tb4;@CPg7&-+?^Q=-@mOE,N%rQ6nAI9E*3%$=&i:f47?)iiVJ_dXOSnCkJ1%IYO+]p&0gYe*L`)<XDd!Pc=T`Z919tWB)H?H[":j*%I("F>nsl-F^rgN?!TE?C;i30k%ZeUfJ53%A=sM20pGCgN2-*11m_Y(i?F-@hsNhtM?L>m2EbkN6"MGk9"]qVi;g-8HTbP(YLdY9m\+#1+L"g=$*:,KDsNm:f8[h,jfu;L*\9Ig%LS\B<K2ER+X*?7?/kl<",*Ua_E@M52nQm78P3L@Zkl-utKuXn)=Kg7;oo29Oo&^m79E-gO]cH@pR%^u%9BuG"4@tLYUYDSEQjXHN%Q.fh2Z\'%LGNZ+JLLXF;aQ-a&cR>AeIW`7AVTP)l%WEiX1b.L?UWeX/o<Q;mX[-/BK'SG5D<9ElK)->;YP2afSHlF8Bh,Uk&u;uu%D?5\Wk_?CW6G']o"uR'MKmR*N#E>tKGu>=n*migB]5E!['8.[WL$W`rVY/e(4Y,5&;'7=K2luU&.-'N?_G`F@>7Zm\FLH%d*b:en%_(^/9ra.h#%LZ3Uf7ZT4MWBCuD(l:B(PRCR2+r4pPpsb%g!h656j)CYA%oemXo.>;FlRHiRL[(gD)9*6c32N^Bj<)b^Q168bDRe\%V,tht'FG)"#Mq/HL.XK,@2E"pq'lcZ::=KIBYB@=2G!A].J[-$Jf?1K'VlF9I;'lI_sUi?5Vi/1V#nRNMq3>umCI;(j09HMfRm@3%Z1Qu6/=lG]M%L-(YH>aU*buPXJn^UN*8(p&LC$/j%%B[05;LC@QDCb(>2qW6MdC90&KOt<$]smr\Hp.qONG[bU[O;kn_;$=/>J/,%><ePH[(;n?<6?&m4*o_.mnTR:O!eSDd0^fQ3#nuQ7HY8N>l@\Zbl%1Z]YZNr_7PidA:ppD(2s_Aa@nEnWh<b<Tue32jV"dkn/fhM%(uSI&Fe1I:9)Lbs2[%]FY,h:O-Dk7FqUI5MNtU&=*SG?n^$a["Y7RF*""/5p/UCu^+K8*Uie"/O)EOReU*m!t0NkDDkURHQ$3+).%&1(=D_%i7!#UpYDQjg6h?=Xn!#!-W<*qKLA_Wd>&V%umh))-K`(7f=#-SKiq'Tlc*4=:e.9AG[ShMnGbSbj`WdiuXC3!5DA?I=%i%'*U_@qBSZ1=<CB;qpf(c6jp@d0TR(7$?$.p-]ts<kHg#d$-;c0(>eoq+7_144-SQ;9bL?,]?4\&^h"g1)J`%_M97iB,%H2]+6+,T%QqUPjQ;bSHhYk+TS2\kfbM-1t3eRL-S,s4rP0pj-o<K)!!O[;5;dW6(r.G@IH4CnHZjsXnNC%G0mtR@/9Ef5WWQ?3./*Q4N)D\%f%'Ts*4R/g<SnjMG@+RIKL6ga"?#[9bB/F80XVogS)KK#HV1^Ca?HJNi75!c'/S!A4*R^;?Z&pW\N0-7G]@j8G`+9R2'Jt"%Q9u<`t%=:/84QqXApH=/AS>U7BrJ''HJ2GKR>@_*hU!JpT/.KCLjg7]\s1U%l/pUSRbaIGJo0qlo^#M5#NI_7[d^&.chnf\jK"f@*[m0E8(%fcP\^<gX%GAV-c^'4im?L0qW+`"W1bnNtGR&hT<H!^`,cQB:/Xqj<0a"dOfWP/spT';ST.%lK%3QjS:eUD,BW7[:;_.T;8$IKD\^%TXe=ZL@>'&l#l1gl'5g7D]s1"h4Xq=gcT/s!eetV.2dB24koIWC[FY;T2+(1f:&\K4)0BVV&[_3R#ohmEiWYr.2K@fC9?K:6$,^:%eJ(NaVH>2oOZF,A,Flg]78>-9LgB8VFpN*%G^A2Vmpj&r^iCE9P7M[H-FBXr@s9?;3[I1BK\-dn#nIW*f"JUR:5@uL\1$AQ3*E+m%DfqW1Kei<\;l\$L1R<UqiNETJ<U1rQ7E[b:C%.XkC!9h"YPWAB1H<c*7lh@^F(dmf94HIsp[l%<hn9*R01'_K`N_X(;p9$b1\4;X%8Rem*DUCXO8o/'Al:TlA4_E5"c-lo%CVEJA2k4dUXg8R/;R['5i$`4Mn\rCi1SM%1\Pnk3?mtG)m02X\qI;CD%`Uo(6Vn.+'Nr6"%]mG(]\KBLSOeX8dLVW-&0/@Q?34?"+Tfp-Hk>,Y22QbT3?7aE0qYJ"nXqfh,rutEI3sO[Y7.5o[nCA`*i$+,6aUeMfe.!]p;2;2,%GAJA+!Jhju+sX+b1+eF/W<UhOEm9XZ9[O#=r4W9QM*e\lmgJLDBEumH@?T,DT]g.X0YNCC;(Ne?gB'4)_Q=PJ/T&[Kr4MHf-hErY%g&J:Zju.WTDPhQ%(o,BhK%4?ua@W06+#@1*qCma4blf[<C"3)je0cHh"QrM:_2G&6B7%du<hW"Z^7&[hKhT/_+(qho\&^qG6@5/R%/=J#Cpb68!eBH&pTqB_TPsLUh$Z=g,]l)W7MO]q%<q'0aD16rL\rk69/3L/PL<.&:TMBA,_+EeN.b]TGMhD+W\1aLX!ij/s!NlbM%Pq\V<L,a)BXij6s*\hpR</j407g9M:3DFc\RQDM'O:Q\@a=Kt79WEIAo'[]Rl5OTR2c$V=pY@?W"MrL&dAf[6=@hte=aNj!HJe"?%DT\sCR>G(N5o`.<pfu2uSPM[D"?C"=m#lrXFsRh-`K4>Al%-@m6872gR_cS-Bl9G=?!K\ImGHWD3YSe7_),?.^hKNm9QPWpH[4Fl%maY^4]Z/clND#k@>XWLHTV3rD1_c`Sq]sa&C%=.qoni4aeR1-B^E&PL/D[p3Z"'6GKk["$(cn<T)_08EHl9d%<]/.rc;t=Ee.!!>%AoCUhP@;R&1UQc<F>$rQ7)Gaenr9R!SbqgiPm)b9;-sbXJCHmr:fR)j2&-9r25)paHY"_GBh?_f&t<>/1Ze)Q*0[Wo-FQ/pSBJ9N%<A&]%GX5>Vh5b>!Q4$Keb-@lcRp@$$:a/p,F[<ClD*+e61YYm+lJ+O+TJqSf9F%I7=0F^cXX+>e\ZL:J-?,4mS59_s!W0eRQGBC`%i<E"!bk*]o6E<\lM(<oUZOLR_Rh#=";pkHn>MCurq=08WNANdu?p$9?aa+cbbBZ/tYK-F3R)dsHg5g#P($BCKK"W,%EW::XoXaSL%IA0?re&tZTRicO>jk31E(\^0Xhe6Gr\5lR(in-#Z=@D?>b]eAE1/p_%i%!i>^>,*e1Lg4ZC$$OhLdX>7`:oDRX!e%%o=!qEf!\gV%%,,7&2fV0_Hpti\$m231F[?l"pj([Un'.(pT$<N0a=`s_X\i:`?]8D#RKWa0YIB8.8C:iEGeL7tYX>V/p?ej2>uSK*W,t>^1O(S,%U?3Ot=!1+eYT_u&UqgIO"\tdB=TNB+91KQNZd>t9ai<`c-rR`JU:[#)@TmmWpa_BW`8h@odj$bL3>?]qY]QT]Usk3`j'&X4%6$<&%_H.mK!(sBbR#:1*Dd:!Dr:`f40FLF9XSlMlFGkkf5RC;NBX;%H%N=%PckWWf>1$%2Ui4iLK\C.C6QEMdO%rat@N(,J<(K-MpJ=r`%Ed5s2Gu1TVgisX2?tmYRCg4ue2Rg.K$Pk6U"1=YXE6_R*H,atpSo.fHmef;iVl1\iBOg45B64PcYdp&cqDQNR\jftGi&]U,#V)fC%bIPR=Yda[=-"@ns4$[p><VoB>eYp,l!6iEED9Z^%Hu=CFFp.k.rgb8F3dTog0uGb9KJgsT143%nB$ZQ1n*\3Cld#CV.4'GJ=k:o3%b-fJ4U:d]iMm_=Y(J0%)R+?4&HRq`pQFH2-WF4Pe:'J9fRCWtD&S0^T(lWD#ofN:F6Ftg&5h_h_TZ.m0e=J(GZ0F=eDW$na3?j9k%VZ'CmYCf;hF7m-9hc/r&')dFHm(p.4PPIC!&.+;nDQbk;,#j]);_T/?OO.T+P;/+<pq3l/YA49b\LpecgTA-r2S*Le5sfq*r;0;_%_isMG+T]Jn1DBY+fe0?uVX&iUB*Qdt(?1&$;j0oegV5grh0JHaWKE%Rr&F2o.5b'^e1"U5gA#9O$IJBB)F.%I"fSg>Mm:+M;8P:#%29D:@Eg5<WW(jDYN8hb1:4J:Q@'g)(nqfh4F#*scU$Gt-F]oa_l1n%:Pue[RR_-kBqJkQZFm$GJ]Kk2;(PjNUYG/\`21"O8o%iQo%U::S-CI`YMN7^8]Fd5Jl0uFq4N$q*RY"K9n?om:'COLse`%4lm3DVAObK9G)bEIRaPbM2DKT11SWH`Q5=9sm#4tL\Vi"ja$R$;0m%nasD6s,<QQ`W>RP9-qU(@mpYeZRVN_N;/h,I^\Q5or1WO9M(Er`%*1QZI(2!qD(&*fc2R>A-H:6f0IO?@dn7J4Cu#:9OSc:%'F3H%fq[j?o+@gIlh'@n,$Do3W`n1%VUpg:o%<j%l#l/QPHE9lCBnns6=<#355#Ob2`%D1eB-5`j30i!/VE3^Krjf08cYV`i(ESiAjjb?%l.BNE]XrF7F)J,Wh!3<p4[H\8[:;Rr8im_$T_QpA'7#u;b_=@Y/sUFU$lcrDWq,Z"EoZG-kJ+V4L"?#f`-0Z_b9CP9:)!$)W%<`R%_bNH6=2Bc#UO]%?QNQ81`hjrp64&2NV_S"uZ0HeM[E[1F7J_mVa>@4/F\URV\_haM6rK+(bDYa;=QD8c>nhMF&@&t>ot'GhpBstb%JP`aJ:8&RL#7S2"Pc1fL.oDqE3lU+uhG\09R^m-'<1)WS/138bas=H`dLoR(gB'dWC-,7nn7+Y_>ZW=?Q'ZR(#REtiX.<<L227F;%[DOln0J/OoDh#kZ)\\`1p-([s*PH?\5=NBOl'ecU_jXi%>#0)lX_uI:-V>YA(2$GGpj+tpiCA0dpiI\_>dqSeX>qh+b>SF&RtAXh%Sl0ri<CXd;Q!@-AH9dd[p>q]K)X)fq8<a!G'aqXX5sA*nNl\MmGl`tgQ[&,o\oZcY##o*rUoDF$[;_)sG"e7%n:q>j<#XXGWh;>d%>Z+;lU("[XigHm)6cEK?Z&L/&cfmB3IgHXb(*m#`M#n:@cqbH1E%BIeR1QV@TiHf@m=9Et5T6>I>F*Ie2,t1AZ6im\C,[a9["/%5%X4NpBmM68\&`!'#JuMsTd&/!'TFHSpU!sqn71o.lPR$Wh)84Jqe"lFJM]X(f2#i$80aD'd!%G[>'IX<cAsggS5nV(6eD+co0pMfC%Jsu\G#Tqh0e(<.$_l[0g'lT[MGOE*2>PKckUHlG1Z-L8T@DsX[%u0:<GN\/RI>U_#QP3UrU&.YS*Z!]B@&;q"8K$3Wis],a:t^?3%F`3YWGsjGs7VenFK*(+'9&]r5j5$7Le*.RBMi>i*$Ns7;>dm6M^U\[Hq0s$^#&l)O6ZcHV&,dAe>FgP.!',t]5OHN3mt.(+nFuP-%5"MM(mN&kdfrAu8$"c6D)K/Vb(To\87V5jV5]POfW-WYD]&d"XKdB-YaCEebKq4MI(+TG#!='@bFh)jNs5N57mQ,BG3drh;aCWWg%5@g7D)lrHrK1Me<Q$9!r]ta`N#>tj9HEG$s[WX4`_hMkm'B@#tRp%%HZue-Zg0-C'oHeiA<ns#UNu%Hq\Hp^m:?DV9:/BWM*j^Mb%2%.-]fT3qh]5Q;\^\!+5SgJYOnu5dS2<Ps<j]u;cV'hg?8-8aIaQ0]kFilA24%Z@CMN>DP<"^Xg\E@^l[AfjC>Or9[F/5EEZoqjF%R_<+9FrR.3Vt8Q[@`u>iHF$Xu:fL.<l?D-g)h/HGm8i0($Rm%>7Bm]Z'VfLpDN0rZMob-^9O"LQ*8)PL*loF!#NDX36koDM)i?6\%_l3@JWj<__S3fNE_!@#"BNLl^B2'!N)ZMke+f&^)DXD_:!]aZ5q#$'&lWh^UQ7O2BGNZ+JLZo!Xg_-W2dADZ:"@:@UV1W*.::45M%^*j6`kTV<5G)M;YCMX&'Ia`/'.aq3`h,.c12BUD"_CI6ViA^f[9mtJ1moJ*(0uPGuotq5P$@Ra0.Nr$cB]cN-!gHe<H3t@dU73oZ%7O;LnO%&-c^$E]""!C=B$+),[r./]g-'B/iFO^cs'sbW-0@NJ)I[/Y'#9-'!@mq5G6]8IX"GU0?FBo,j:-]OeZ9CsC&UnU<j%+e5%$(o>(4D1^/.SL!73KM>A(uq8S!@KeVE:BV`qRX+,#O,[\kuU*Q)rFGPFO0&bPXsKe7W$NTBcIUQcF\+l_u6G,]<sP[[Q@?Q$oGEH%Lha,6*hK4el46E;<>[Jg]&FZa[j5EaBS!.:TTln0$0SN&G/-&Dru79'QOasUMKX.Sf.6L)Na"!)^2`eVoA2/m-nJiLoBo8Z0htM$%'^d>:L68_B#oV6ThXfqQQK0njCujo&Y9mQIHEZt:oT11mV(.Uc,.LLX)565lN.S07&r'HX'0]R_65&'I+2[G!;b8\Eq)ZoRMNq2n%;<>nT:)N0+S(G:8mLGMIEMlc#6b-7)F`pd,I&Jl%T?LnJ&J`97j;,[-lj9P!@.MZr5np8TX&U^5?Gi`6C-gbA5#V5**S>&u(1!n8%Kq6^%9CYsgr&5mq/_!:E*t>MQPr0WmeM_B<TM)Ttm>?*PY8c@bj"&@>=;7-4d.g4]Zlg;e?qKS'Ytk]m#XR!GNo6ZMQ1to2C58Qr%lKBZ(qRrKEnRcLmq>='[A5EDfFR_0M=]L*iMa)&-MDTm8>X<KfRaM-rV%oK2!^_MQaL&p_'5u0%2\+:GBV$6Ffe:i/ODQgA.hKrI%_+h'4\7>ff[j%i^``I^.JVg_68GF=1:$1Nf3)Fj#f<E![6e6H/.X6E48lP7`jJNn]6]>EY*8tt,_:K44XD)Hlb1>m";([L)Wnr'n%m^hqU!M[D4dRbm*"(kaq9r'!h`0Z`U![$7CCgp%eEqq)<QSIpdSk'`.=ULAe0hL^H'>]=Q>ID'\OXt9rq,V!tBLfro9`]]HlPlaS%`10IWEH@ncXCP5us4u)gc?jb-#r&!mVUbko-"@F*2'MlSV,Po5aZS;],YWkeW0-+FWL5L@@@RhZ(9$Org*8;2.@2a%h)<IXkhSdj%X%n^t@HB72HbI0Nf#5794/S;q-%Jpk'?;A)aEKkP46Jbj$Ao.Ra05]X=-h^EetJpGDWp,d?AZ`SXZhh9gdc0+Aj\KpN,/,u4e#DH%V8KNZ<2!#Q.UcqUGj+l^e%uio@S9m%rJ9lo],Fm)R?:ltG'/TP6i.^'CCAiX/%gJjoZb_J`cj4F-noKE"cZGNJ/DPUp`UKb(;oB^%"k3,?g\VK#P?Eo<b\H9?6U3i$-%B9Ylu`,JB4qa'I6o)FrhUV=Bq!Z9(8jUOGN@sVDO>ZuWYsQhrL,EXr4MHfV[-15G1%N9As;VV%fKN!/-",?B*=?/+m@YlBVV9[1UXX1Dl*5lDaL5qc;3J@-a,k+F1\PkDJFLq#NU3i/[73:8'mFA5f4h!1f>*6b<d!?NDi[kXjmgXR%ICjCpNJb36;EQ*M:9\27k2fJlOJj1XI"T]j6CJAkcQVm28)fF&@Iq9L7-F"8XEYkGae#i&DD1`u!o/Ql<`pD>4&`UR$Zp,&B^W<q%Ao_67&*/gmDPpU>VYmg.Y^CHZ\oHD.!]h,</A`1EOgkMsbp&jVpe8W#<$b<?R)>fjT/p(9rSId&1@n1(][(&#?dqGW!sZAo(ttrJ%dGAql"N0LY9nN5ZPjP2/8%MufN2%q(X]8$)@s_pmDUi0>SUHNNJB_87_2;Jl@e.dmld#Gr4OMC"!RKNS_6C-TbsP$TI#&-=VK!6K%q4]2]4"*Q'1hXP\_&+NaLO@b+Q+]p_E?<_34,@PDB$U2tNPR_Kh+f[jL"0kQ/.e^\^u"spdpDc^n[R#H_WQ9N(m#fWAAusbY$Q>O%RlZ>GjS0"l+F'A?`?)R&I.!'5[tpogSb4tir2;Me6)MR0Bb2fMIYub-]*nk3./$Z(b4M6\CCEmhd&=u`Vp9ud3);tZ9*6A&G8UH"%lH<+QKCMV`Go4XeOdK?-?m-`;cXgq355E4IlcsqQMAj:i,;e+bVtp]?B+$p>fFLQAa1S&`aXth:Lg)HEh0Fm8[_8MB#a.Ah&8Ke<%`C9$&V4XiT+nBD9f_'c4Z6?aNQ!@-A4Bi*F-G7PMGcDLH-M$*_'SBFe%S]1lYd.!ODpW_(mc\fVI8EbIjJ4&kBRmK&M';humfVOn%W42kVV4"Un@Z,YIm@eR!4\VZ2LC0qfq*0`#0'UYR)0r[phB43p[NQ'UR4_J>AoD)\K%lrMFRU2dkA7uTVcK(D"2'5kUR61-R9YI%%hu10)I#acuDJ-K9-9fH;l>Y%*!_K.LPNcQNoJiS/>[0#X[DmJh[Ud?AS_eL]5X^A*?ti_:;tb7(E+pO.D-8o,Q,9NAnr@F-O_0"A%!/XPrUgJW>d=H\%4lo7+WgqG*He48##2j3?C+1#o%mVOO3o.4Nk>;%ILp33W)LfWZOJP^hdM3\eAm6$FJZaT'^Hn"N0$RF:LX-%k%Jkl"b48H"0i2%XF4eA"VW,'b^BN"=A[]$5:[95PpY8n'BBB@s_lc/&ML`0&/H<!1W*?fc,6m0aRhUl`DC+*BQ6niG.M%"TO#Qnj.%Jm1'pXf\@<mU(QAU7j-bN$;7!ElN#H&C:(^IDo*a)I8`Skp\S+[+.SaYE9NbAo'OH6M=lJDY`;Gp#[eGTX=Q6TQbEnI&!S\@ga*U%H5't2KjV+q],DuD7?4'B1=!29=J3M+aaKE`fb]Q2TpPWj,c0u)oa5p$H>ULY@oT^PI;S0-52"L9f0JY&7;M_KF9'F1oC'9\R@[7S%an`]G=9IY(WbZ9F>uAR(=!?R^=IhdPWnqI1U"O'<"9=NOMEWA=<b"<Fpf![iHaul.f/gYu/TN=0Aiq+lBIuH%$;VnWD=:D_ZKVQu%.8NV4G^&SeEVSleG8.ke1K/T9=q[T^_@mieb)@arW%]D,D^<cNqstHX:dZ_qjgrN%.sq'57TR.@ZHf!nTDc-I<BQs/FO=3J17@5?%9d+G(Bl2X.:5)D_0_b*GS?u#mQ1aS.Fm$F7KK:Wp9$sZOk`b<,&Zn>5(%+]V_TLcQ<u@Bp^_`ctfHa7EdHH?3n"hNO6CUO&U%:D'%m]=u[IXOO?$//$.C4-k]*#^jU!=&ne;GM:+Ui.$mQg]B0GL!frTV,gZ&S/9A+G=O#g_u\Tga&-.ZDDbX`.$%+>aFd2"PKeJWi2Jd%0q;d\Y?OkXoQuq!+Gj+Y`aK<m4d!uBdYu?YS'*62Kn"hOe`AG>c:[njG5];cb*'u)>MF6Ka*0JG45[g4rr;f_J+qFLrDWaj5Q(=A%rqYaWqrQGUcen]ne%bn[a'\i5f:W*/:VZi(]0H;fkPtA>j6&Z,q(I6pq/=%GpZ!nKJ,Ju+^]*UR^]*fofDkcls2soBj]qf6:Oi/+%J,J.&!t=I+P5~>%AI9_PrivateDataEnd